/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of interest accrual period types
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of address types
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of allocation types for vesting terms. Using an example of 18 shares split across 4 tranches, each allocation type results in a different schedule as follows:
 *   1.  Cumulative Rounding (5 - 4 - 5 - 4)
 *   2.  Cumulative Round Down (4 - 5 - 4 - 5)
 *   3.  Front Loaded (5 - 5 - 4 - 4)
 *   4.  Back Loaded (4 - 4 - 5 - 5)
 *   5.  Front Loaded to Single Tranche (6 - 4 - 4 - 4)
 *   6.  Back Loaded to Single Tranche (4 - 4 - 4 - 6)
 *   7.  Fractional (4.5 - 4.5 - 4.5 - 4.5)
 */
export type EnumAllocationType =
  | "CUMULATIVE_ROUNDING"
  | "CUMULATIVE_ROUND_DOWN"
  | "FRONT_LOADED"
  | "BACK_LOADED"
  | "FRONT_LOADED_TO_SINGLE_TRANCHE"
  | "BACK_LOADED_TO_SINGLE_TRANCHE"
  | "FRACTIONAL";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of stock compensation types
 */
export type EnumCompensationType = "OPTION" | "RSU";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of interest compounding types
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of convertible conversion calculation types.
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of types of conversion rights.
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of types of triggers common to various legal rights - e.g. does the satisfaction of a condition trigger an automatic conversion or merely a right to convert? If `UNSPECIFIED`, the system of record cannot represent this data in a structured form.
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of convertible instrument types
 */
export type EnumConvertibleType = "NOTE" | "SAFE" | "CONVERTIBLE_SECURITY";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of how the number of days are determined per period
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of email types
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of different OCF file types which are used to load proper schemas for validation
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of interest payout types (e.g. deferred or cash payment)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of recognized OCF versions
 */
export type EnumOCFVersionType = "1.0.0-a3" | "1.0.0-b1";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of object types
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of option types
 */
export type EnumOptionType = "NSO" | "ISO" | "INTL";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of parent sources a stock can be issued or created from
 */
export type EnumParentSecurityType = "STOCK_PLAN" | "STOCK" | "WARRANT" | "CONVERTIBLE";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of time period types
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of phone number types
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of rounding types
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of types of relationships between stakeholder and issuer
 */
export type EnumStakeholderRelationshipType =
  | "ADVISOR"
  | "BOARD_MEMBER"
  | "CONSULTANT"
  | "EMPLOYEE"
  | "EX_ADVISOR"
  | "EX_CONSULTANT"
  | "EX_EMPLOYEE"
  | "EXECUTIVE"
  | "FOUNDER"
  | "INVESTOR"
  | "NON_US_EMPLOYEE"
  | "OFFICER"
  | "OTHER";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of stakeholder types - individual (human) or institution (entity)
 */
export type EnumStakeholderType = "INDIVIDUAL" | "INSTITUTION";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of stock class types
 */
export type EnumStockClassType = "COMMON" | "PREFERRED";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of termination window types
 */
export type EnumTerminationWindowType =
  | "VOLUNTARY_OTHER"
  | "VOLUNTARY_GOOD_CAUSE"
  | "VOLUNTARY_RETIREMENT"
  | "INVOLUNTARY_OTHER"
  | "INVOLUNTARY_DEATH"
  | "INVOLUNTARY_DISABILITY"
  | "INVOLUNTARY_WITH_CAUSE";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of valuation types
 */
export type EnumValuationType = "409A";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration representing a vesting "day of month". Since not all months have 29, 30, or 31 days, this enum requires those values to also specify an overflow behavior.
 *  - `01` - `28` : Day 1, 2... 28 of the month; e.g. `03` means vesting occurs on the 3rd of the month.
 *  - `29_OR_LAST_DAY_OF_MONTH` - `31_OR_LAST_DAY_OF_MONTH` : Day 29, 30, or 31 of the month, defaulting to the last day of the month for shorter months; e.g. `31_OR_LAST_DAY_OF_MONTH` means monthly vesting occurs on Jan 31, Feb 28/29, Mar 31, Apr 30, etc.
 *  - `VESTING_START_DAY_OR_LAST_DAY_OF_MONTH` vests on the same day of month as the day of the `VESTING_START` condition; e.g. if vesting commences on Jan 15 then any vesting will accrue on the 15th of future vesting months. If vesting commencement occurs on days 29-31, this has the same behavior as the other `*_LAST_DAY_OF_MONTH` values.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enumeration of vesting trigger types
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Top-level schema describing the OCF Manifest, which holds issuer information and references ocf files containing transactions, stakeholders, stock classes, etc.
 */
export type OCFManifestFile = OCFManifestFile1 & OCFManifestFile2;
export type OCFManifestFile1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * OCF Version Identifier
 */
export type EnumOCFVersionType = "1.0.0-a3" | "1.0.0-b1";
/**
 * Issuer for the cap table
 */
export type ObjectIssuer = ObjectIssuer1 & ObjectIssuer2;
export type ObjectIssuer1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date of formation
 */
export type TypeDate = string;
/**
 * The country where the issuer company was legally formed (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * The state, province, or subdivision where the issuer company was legally formed
 */
export type TypeCountrySubdivisionCode = string;
/**
 * Issuing country code (ISO 3166-1 alpha-2) for the tax identifier
 */
export type TypeCountryCode1 = string;
/**
 * The tax ids for this issuer company
 */
export type IssuerTaxIDArray = TypeTaxIdentifier[];
/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";
/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";
/**
 * What type of address is this (e.g. legal address, contact address, etc.)
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";
/**
 * State, province, or equivalent identifier required for an address in this country
 */
export type TypeCountrySubdivisionCode1 = string;
/**
 * Country code for this address (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode2 = string;
/**
 * The point-in-time represented by this OCF Package
 */
export type TypeDate1 = string;
/**
 * Unstructured text comments related to and stored for the cap table
 */
export type CapTableCommentArray = string[];
/**
 * MD5 file checksum
 */
export type TypeMD5Hash = string;
/**
 * List of files containing lists of issuer stock plans, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/stock_plans_file schema to validate loaded files)
 */
export type CapTableStockPlansFileSArray = TypeFile[];
/**
 * List of files containing lists of issuer stock legend templates, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/stock_legend_templates_file schema to validate loaded files)
 */
export type CapTableStockLegendTemplatesFileSArray = TypeFile[];
/**
 * List of files containing lists of issuer stock classes, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/stock_classes_file schema to validate loaded files)
 */
export type CapTableStockClassesFileSArray = TypeFile[];
/**
 * List of files containing lists of issuer vesting terms, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/vesting_terms_file schema to validate loaded files)
 */
export type CapTableVestingTermsFileSArray = TypeFile[];
/**
 * List of files containing lists of issuer valuations, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/valuations_file schema to validate loaded files)
 */
export type CapTableValuationFileSArray = TypeFile[];
/**
 * List of files containing lists of issuer transactions, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/transactions_file schema to validate loaded files)
 *
 * @minItems 1
 */
export type CapTableTransactionFileSArray = [TypeFile, ...TypeFile[]];
/**
 * List of files containing lists of issuer stakeholders, indexed from the file containing the first such object created to the file containing the last (See separate /schema/files/stakeholders_file schema to validate loaded files)
 *
 * @minItems 1
 */
export type CapTableStakeholderFileSArray = [TypeFile, ...TypeFile[]];

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface OCFManifestFile2 {
  ocf_version: EnumOCFVersionType;
  file_type: "OCF_MANIFEST_FILE";
  issuer: ObjectIssuer;
  as_of: TypeDate1;
  /**
   * Timestamp of when the package was generated. Useful when determining which set of data is most up-to-date, if presented with two packages that have the same `as_of` date, but different cap table data.
   */
  generated_at: string;
  comments?: CapTableCommentArray;
  stock_plans_files: CapTableStockPlansFileSArray;
  stock_legend_templates_files: CapTableStockLegendTemplatesFileSArray;
  stock_classes_files: CapTableStockClassesFileSArray;
  vesting_terms_files: CapTableVestingTermsFileSArray;
  valuations_files: CapTableValuationFileSArray;
  transactions_files: CapTableTransactionFileSArray;
  stakeholders_files: CapTableStakeholderFileSArray;
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectIssuer2 {
  object_type?: "ISSUER";
  /**
   * Legal name of the issuer
   */
  legal_name: string;
  /**
   * Doing Business As name
   */
  dba?: string;
  formation_date: TypeDate;
  country_of_formation: TypeCountryCode;
  country_subdivision_of_formation?: TypeCountrySubdivisionCode;
  tax_ids?: IssuerTaxIDArray;
  email?: TypeEmail;
  phone?: TypePhone;
  address?: TypeAddress;
  id?: unknown;
  comments?: unknown;
}
/**
 * Type representation of a government identifier for tax purposes (e.g. EIN) and corresponding country code (ISO-3166)
 */
export interface TypeTaxIdentifier {
  /**
   * Tax identifier as string
   */
  tax_id: string;
  country: TypeCountryCode1;
}
/**
 * A work email that the issuer company can be reached at
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}
/**
 * A phone number that the issuer company can be reached at
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}
/**
 * The headquarters address of the issuing company
 */
export interface TypeAddress {
  address_type: EnumAddressType;
  /**
   * Street address (multi-line string)
   */
  street_suite?: string;
  /**
   * City
   */
  city?: string;
  country_subdivision?: TypeCountrySubdivisionCode1;
  country: TypeCountryCode2;
  /**
   * Address postal code
   */
  postal_code?: string;
}
/**
 * Type representation of a file
 */
export interface TypeFile {
  /**
   * Path to the file within the OCF container
   */
  filepath: string;
  md5: TypeMD5Hash;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of stakeholders
 */
export type FileStakeholders = FileStakeholders1 & FileStakeholders2;
export type FileStakeholders1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a stakeholder
 */
export type ObjectStakeholder = ObjectStakeholder1 & ObjectStakeholder2;
export type ObjectStakeholder1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Distinguish individuals from institutions
 */
export type EnumStakeholderType = "INDIVIDUAL" | "INSTITUTION";
/**
 * What is the current relationship of the stakeholder to the issuer?
 */
export type EnumStakeholderRelationshipType =
  | "ADVISOR"
  | "BOARD_MEMBER"
  | "CONSULTANT"
  | "EMPLOYEE"
  | "EX_ADVISOR"
  | "EX_CONSULTANT"
  | "EX_EMPLOYEE"
  | "EXECUTIVE"
  | "FOUNDER"
  | "INVESTOR"
  | "NON_US_EMPLOYEE"
  | "OFFICER"
  | "OTHER";
/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";
/**
 * Phone numbers to reach the contact at
 */
export type ContactInfoPhoneNumberArray = TypePhone[];
/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";
/**
 * Emails to reach the contact at
 */
export type ContactInfoEmailAddressArray = TypeEmail[];
/**
 * What type of address is this (e.g. legal address, contact address, etc.)
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";
/**
 * State, province, or equivalent identifier required for an address in this country
 */
export type TypeCountrySubdivisionCode = string;
/**
 * Country code for this address (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * Addresses for the stakeholder
 */
export type StakeholderAddressArray = TypeAddress[];
/**
 * Issuing country code (ISO 3166-1 alpha-2) for the tax identifier
 */
export type TypeCountryCode1 = string;
/**
 * The tax ids for this stakeholder
 */
export type StakeholderTaxIDArray = TypeTaxIdentifier[];

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileStakeholders2 {
  /**
   * List of OCF stakeholder objects
   */
  items: ObjectStakeholder[];
  file_type: "OCF_STAKEHOLDERS_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStakeholder2 {
  object_type?: "STAKEHOLDER";
  name: TypeName;
  stakeholder_type: EnumStakeholderType;
  /**
   * This might be any sort of id assigned to the stakeholder by the issuer, such as an internal company ID for an employee stakeholder
   */
  issuer_assigned_id?: string;
  current_relationship?: EnumStakeholderRelationshipType;
  primary_contact?: TypeContactInfo;
  addresses?: StakeholderAddressArray;
  tax_ids?: StakeholderTaxIDArray;
  id?: unknown;
  comments?: unknown;
}
/**
 * Name for the stakeholder
 */
export interface TypeName {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}
/**
 * The primary contact info for the stakeholder
 */
export interface TypeContactInfo {
  name: TypeName1;
  phone_numbers: ContactInfoPhoneNumberArray;
  emails: ContactInfoEmailAddressArray;
}
/**
 * Contact's name
 */
export interface TypeName1 {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}
/**
 * Type representation of a phone number
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}
/**
 * Type representation of an email address
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}
/**
 * Type representation of an address
 */
export interface TypeAddress {
  address_type: EnumAddressType;
  /**
   * Street address (multi-line string)
   */
  street_suite?: string;
  /**
   * City
   */
  city?: string;
  country_subdivision?: TypeCountrySubdivisionCode;
  country: TypeCountryCode;
  /**
   * Address postal code
   */
  postal_code?: string;
}
/**
 * Type representation of a government identifier for tax purposes (e.g. EIN) and corresponding country code (ISO-3166)
 */
export interface TypeTaxIdentifier {
  /**
   * Tax identifier as string
   */
  tax_id: string;
  country: TypeCountryCode1;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of stock classes
 */
export type FileStockClasses = FileStockClasses1 & FileStockClasses2;
export type FileStockClasses1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a class of stock issued by the issuer
 */
export type ObjectStockClass = ObjectStockClass1 & ObjectStockClass2;
export type ObjectStockClass1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * The type of this stock class (e.g. Preferred or Common)
 */
export type EnumStockClassType = "COMMON" | "PREFERRED";
/**
 * The most current number of shares authorized for this stock class
 */
export type TypeNumeric = string;
/**
 * Date on which the board approved the stock class
 */
export type TypeDate = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric1 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric2 = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric3 = string;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric4 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric5 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric6 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric7 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * List of stock class conversion rights possible for this stock class
 */
export type StockClassStockClassConversionRightsArray = TypeStockClassConversionRights[];
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric8 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric9 = string;

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileStockClasses2 {
  /**
   * List of OCF stock class objects
   */
  items: ObjectStockClass[];
  file_type: "OCF_STOCK_CLASSES_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockClass2 {
  object_type?: "STOCK_CLASS";
  /**
   * Name for the stock type (e.g. Series A Preferred or Class A Common)
   */
  name: string;
  class_type: EnumStockClassType;
  /**
   * Default prefix for certificate numbers in certificated shares (e.g. CS- in CS-1). If certificate IDs have a dash, the prefix should end in the dash like CS-
   */
  default_id_prefix: string;
  current_shares_authorized: TypeNumeric;
  board_approval_date: TypeDate;
  /**
   * The number of votes each share of this stock class gets
   */
  votes_per_share: TypeNumeric1 | TypePreReleaseOmission;
  par_value?: TypeMonetary;
  price_per_share?: TypeMonetary1;
  seniority: TypeNumeric3;
  conversion_rights?: StockClassStockClassConversionRightsArray;
  liquidation_preference_multiple?: TypeNumeric8;
  participation_cap_multiple?: TypeNumeric9;
  id?: unknown;
  comments?: unknown;
}
/**
 * Transitional type; allows an otherwise "required" field to support omission by an implementation that can not yet support all fields. This is not intended to be permanent; rather it is a communication mechanism indicating that a field added in a pre-release version of the spec will need to be implemented to support the next release.
 */
export interface TypePreReleaseOmission {
  /**
   * Implementation-specific, optional message about missing data
   */
  comment?: string;
  /**
   * Positive indication of intentional omission
   */
  omitted: true;
}
/**
 * Per-share par value of this stock class
 */
export interface TypeMonetary {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * Per-share price this stock class was issued for
 */
export interface TypeMonetary1 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary2;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary2 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric4;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary3;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary3 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric5;
  denominator: TypeNumeric6;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric7;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric5;
  denominator: TypeNumeric6;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of stock legend templates
 */
export type FileStockLegendTemplates = FileStockLegendTemplates1 & FileStockLegendTemplates2;
export type FileStockLegendTemplates1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a stock legend template
 */
export type ObjectStockLegendTemplate = ObjectStockLegendTemplate1 & ObjectStockLegendTemplate2;
export type ObjectStockLegendTemplate1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileStockLegendTemplates2 {
  /**
   * List of OCF stock legend template objects
   */
  items: ObjectStockLegendTemplate[];
  file_type: "OCF_STOCK_LEGEND_TEMPLATES_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockLegendTemplate2 {
  object_type?: "STOCK_LEGEND_TEMPLATE";
  /**
   * Name for the stock legend template
   */
  name: string;
  /**
   * The full text of the stock legend
   */
  text: string;
  id?: unknown;
  comments?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of stock plans
 */
export type FileStockPlans = FileStockPlans1 & FileStockPlans2;
export type FileStockPlans1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a plan which stock options are issued from
 */
export type ObjectStockPlan = ObjectStockPlan1 & ObjectStockPlan2;
export type ObjectStockPlan1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which board approved the plan
 */
export type TypeDate = string;
/**
 * This optional field tracks when the stockholders approved this stock plan. This is intended for use by US companies that want to issue Incentive Stock Options (ISOs), as the issuing StockPlan must receive shareholder approval within a specified time frame in order to issue valid ISOs.
 */
export type TypeDate1 = string;
/**
 * The most recent number of shares reserved in the pool for this stock plan by the Board or equivalent body. Actual shares issued and outstanding from the pool should be determined by traversing the event stack. The plan's reserved share history (e.g. previous `current_shares_reserved` amounts) is not available in OCF version 1.
 */
export type TypeNumeric = string;

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileStockPlans2 {
  /**
   * List of OCF stock plan objects
   */
  items: ObjectStockPlan[];
  file_type: "OCF_STOCK_PLANS_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockPlan2 {
  object_type?: "STOCK_PLAN";
  /**
   * Name for the stock plan
   */
  plan_name: string;
  board_approval_date?: TypeDate;
  stockholder_approval_date?: TypeDate1;
  current_shares_reserved: TypeNumeric;
  /**
   * Identifier of the StockClass object this plan is composed of
   */
  stock_class_id: string;
  id?: unknown;
  comments?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list transactions
 */
export type FileTransactions = FileTransactions1 & FileTransactions2;
export type FileTransactions1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a convertible acceptance transaction
 */
export type ObjectConvertibleAcceptanceTransaction = ObjectConvertibleAcceptanceTransaction1 &
  ObjectConvertibleAcceptanceTransaction2;
export type ObjectConvertibleAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Object describing a plan security acceptance transaction
 */
export type ObjectPlanSecurityAcceptanceTransaction = ObjectPlanSecurityAcceptanceTransaction1 &
  ObjectPlanSecurityAcceptanceTransaction2;
export type ObjectPlanSecurityAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object describing a stock acceptance transaction
 */
export type ObjectStockAcceptanceTransaction = ObjectStockAcceptanceTransaction1 & ObjectStockAcceptanceTransaction2;
export type ObjectStockAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object describing a warrant acceptance transaction
 */
export type ObjectWarrantAcceptanceTransaction = ObjectWarrantAcceptanceTransaction1 &
  ObjectWarrantAcceptanceTransaction2;
export type ObjectWarrantAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object describing a cancellation of a convertible security
 */
export type ObjectConvertibleCancellationTransaction = ObjectConvertibleCancellationTransaction1 &
  ObjectConvertibleCancellationTransaction2;
export type ObjectConvertibleCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Object describing a cancellation of a plan security
 */
export type ObjectPlanSecurityCancellationTransaction = ObjectPlanSecurityCancellationTransaction1 &
  ObjectPlanSecurityCancellationTransaction2;
export type ObjectPlanSecurityCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric1 = string;
/**
 * Object describing a cancellation of a stock security
 */
export type ObjectStockCancellationTransaction = ObjectStockCancellationTransaction1 &
  ObjectStockCancellationTransaction2;
export type ObjectStockCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric2 = string;
/**
 * Object describing a cancellation of a warrant security
 */
export type ObjectWarrantCancellationTransaction = ObjectWarrantCancellationTransaction1 &
  ObjectWarrantCancellationTransaction2;
export type ObjectWarrantCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric3 = string;
/**
 * Object describing a conversion of a convertible security
 */
export type ObjectConvertibleConversionTransaction = ObjectConvertibleConversionTransaction1 &
  ObjectConvertibleConversionTransaction2;
export type ObjectConvertibleConversionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityConversionTransaction;
/**
 * Identifier for the security (or securities) that resulted from the conversion
 */
export type SecurityConversionResultingSecurityIDArray = string[];
/**
 * Quantity of security units converted
 */
export type TypeNumeric4 = string;
/**
 * Object describing a conversion of stock
 */
export type ObjectStockConversionTransaction = ObjectStockConversionTransaction1 & ObjectStockConversionTransaction2;
export type ObjectStockConversionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityConversionTransaction;
/**
 * Quantity of non-monetary security units converted
 */
export type TypeNumeric5 = string;
/**
 * Object describing a plan security exercise transaction
 */
export type ObjectPlanSecurityExerciseTransaction = ObjectPlanSecurityExerciseTransaction1 &
  ObjectPlanSecurityExerciseTransaction2;
export type ObjectPlanSecurityExerciseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityExerciseTransaction;
/**
 * Identifier for the security (or securities) that resulted from the exercise
 */
export type SecurityExerciseResultingSecurityIDArray = string[];
/**
 * Quantity of shares exercised
 */
export type TypeNumeric6 = string;
/**
 * Object describing a warrant exercise transaction
 */
export type ObjectWarrantExerciseTransaction = ObjectWarrantExerciseTransaction1 & ObjectWarrantExerciseTransaction2;
export type ObjectWarrantExerciseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityExerciseTransaction;
/**
 * Object describing convertible instrument issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectConvertibleIssuanceTransaction = ObjectConvertibleIssuanceTransaction1 &
  ObjectConvertibleIssuanceTransaction2;
export type ObjectConvertibleIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Date of board approval for the security
 */
export type TypeDate1 = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];
/**
 * What kind of convertible instrument is this (of the supported, enumerated types)
 */
export type EnumConvertibleType = "NOTE" | "SAFE" | "CONVERTIBLE_SECURITY";
/**
 * In event the convertible can convert due to trigger events (e.g. Maturity, Next Qualified Financing, Change of Control, at Election of Holder), what are the terms?
 *
 * @minItems 1
 */
export type ConvertibleConversionTriggerArray = [
  (
    | TypeAutomaticConversionOnConditionTrigger
    | TypeAutomaticConversionOnDateTrigger
    | TypeElectiveConversionAtWill
    | TypeElectiveConversionInDateRangeTrigger
    | TypeElectiveConversionOnConditionTrigger
    | TypeUnspecifiedConversionTrigger
  ),
  ...(
    | TypeAutomaticConversionOnConditionTrigger
    | TypeAutomaticConversionOnDateTrigger
    | TypeElectiveConversionAtWill
    | TypeElectiveConversionInDateRangeTrigger
    | TypeElectiveConversionOnConditionTrigger
    | TypeUnspecifiedConversionTrigger
  )[]
];
/**
 * Type representation of automatic trigger on a tive or condition.
 */
export type TypeAutomaticConversionOnConditionTrigger = TypeAutomaticConversionOnConditionTrigger1 &
  TypeAutomaticConversionOnConditionTrigger2;
export type TypeAutomaticConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric7 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric8 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric9 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric10 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of an automatic trigger on a date.
 */
export type TypeAutomaticConversionOnDateTrigger = TypeAutomaticConversionOnDateTrigger1 &
  TypeAutomaticConversionOnDateTrigger2;
export type TypeAutomaticConversionOnDateTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Date on which trigger occurs automatically (if it hasn't already occured)
 */
export type TypeDate2 = string;
/**
 * Type representation of elective trigger valid at will (so long as instrument is valid and outstanding).
 */
export type TypeElectiveConversionAtWill = TypeElectiveConversionAtWill1 & TypeElectiveConversionAtWill2;
export type TypeElectiveConversionAtWill1 = PrimitiveBaseConversionTriggerType;
/**
 * Type representation of elective trigger valid on or after start_date and until or before end_date.
 */
export type TypeElectiveConversionInDateRangeTrigger = TypeElectiveConversionInDateRangeTrigger1 &
  TypeElectiveConversionInDateRangeTrigger2;
export type TypeElectiveConversionInDateRangeTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Start date of range (inclusive)
 */
export type TypeDate3 = string;
/**
 * End date of range (inclusive)
 */
export type TypeDate4 = string;
/**
 * Type representation of elective trigger on fulfillment of a condition.
 */
export type TypeElectiveConversionOnConditionTrigger = TypeElectiveConversionOnConditionTrigger1 &
  TypeElectiveConversionOnConditionTrigger2;
export type TypeElectiveConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Use this where no structured data is available regarding what triggers the conversion of a given security.
 */
export type TypeUnspecifiedConversionTrigger = TypeUnspecifiedConversionTrigger1 & TypeUnspecifiedConversionTrigger2;
export type TypeUnspecifiedConversionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * What pro-rata (if any) is the holder entitled to buy at the next round?
 */
export type TypeNumeric11 = string;
/**
 * Object describing securities issuance transaction from a plan by the issuer and held by a stakeholder
 */
export type ObjectPlanSecurityIssuanceTransaction = ObjectPlanSecurityIssuanceTransaction1 &
  ObjectPlanSecurityIssuanceTransaction2 &
  ObjectPlanSecurityIssuanceTransaction3;
export type ObjectPlanSecurityIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
export type ObjectPlanSecurityIssuanceTransaction2 =
  | {
      compensation_type?: "OPTION";
      [k: string]: unknown;
    }
  | {
      compensation_type?: "RSU";
      [k: string]: unknown;
    };
/**
 * If the plan security is compensation, what kind?
 */
export type EnumCompensationType = "OPTION" | "RSU";
/**
 * If the plan security is an option, what kind?
 */
export type EnumOptionType = "NSO" | "ISO" | "INTL";
/**
 * How many shares are subject to this plan security?
 */
export type TypeNumeric12 = string;
/**
 * Type represention of an ISO-8601 date, e.g. 2022-01-28
 */
export type TypeDate5 = string;
/**
 * What cause of termination is this window for?
 */
export type EnumTerminationWindowType =
  | "VOLUNTARY_OTHER"
  | "VOLUNTARY_GOOD_CAUSE"
  | "VOLUNTARY_RETIREMENT"
  | "INVOLUNTARY_OTHER"
  | "INVOLUNTARY_DEATH"
  | "INVOLUNTARY_DISABILITY"
  | "INVOLUNTARY_WITH_CAUSE";
/**
 * The type of period being measured (e.g. days or month)
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Exercise periods applicable to plan security after a termination for a given, enumerated reason
 */
export type PlanSecurityTerminationWindowArray = TypeTerminationWindow[];
/**
 * Object describing a stock issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectStockIssuanceTransaction = ObjectStockIssuanceTransaction1 & ObjectStockIssuanceTransaction2;
export type ObjectStockIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Number of shares issued to the stakeholder
 */
export type TypeNumeric13 = string;
/**
 * List of stock legend ids that apply to this stock
 */
export type StockIssuanceStockLegendIDArray = string[];
/**
 * Object describing warrant issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectWarrantIssuanceTransaction = ObjectWarrantIssuanceTransaction1 & ObjectWarrantIssuanceTransaction2;
export type ObjectWarrantIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Quantity of shares the warrant is exercisable for
 */
export type TypeNumeric14 = string;
/**
 * In event the Warrant can convert due to trigger events (e.g. Maturity, Next Qualified Financing, Change of Control, at Election of Holder), what are the terms?
 */
export type WarrantIssuanceExerciseTriggerArray = (
  | TypeAutomaticConversionOnConditionTrigger1
  | TypeAutomaticConversionOnDateTrigger1
  | TypeElectiveConversionAtWill1
  | TypeElectiveConversionInDateRangeTrigger1
  | TypeElectiveConversionOnConditionTrigger1
  | TypeUnspecifiedConversionTrigger1
)[];
/**
 * Type represention of an ISO-8601 date, e.g. 2022-01-28
 */
export type TypeDate6 = string;
/**
 * Object describing a re-issuance of stock
 */
export type ObjectStockReIssuanceTransaction = ObjectStockReIssuanceTransaction1 & ObjectStockReIssuanceTransaction2;
export type ObjectStockReIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityReissuanceTransaction;
/**
 * Identifier of the new security (or securities) issuance resulting from a reissuance
 */
export type SecurityReissuanceResultingSecurityIDArray = string[];
/**
 * When stock is reissued as a result of a stock split, this field contains id of the respective stock class split transaction. It is not set otherwise.
 */
export type IdOfStockClassSplitTransaction = string;
/**
 * Free-form human-readable reason for stock reissuance
 */
export type ReasonForStockReissuance = string;
/**
 * Object describing a stock repurchase transaction
 */
export type ObjectStockRepurchaseTransaction = ObjectStockRepurchaseTransaction1 & ObjectStockRepurchaseTransaction2;
export type ObjectStockRepurchaseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRepurchaseTransaction;
/**
 * Number of shares of stock repurchased
 */
export type TypeNumeric15 = string;
/**
 * For partial repurchases, list of security id(s) of the resulting stock objects holding any remaining shares
 */
export type SecurityRepurchaseResultingSecurityIDArray = string[];
/**
 * Object describing a plan security release transaction
 */
export type ObjectPlanSecurityReleaseTransaction = ObjectPlanSecurityReleaseTransaction1 &
  ObjectPlanSecurityReleaseTransaction2;
export type ObjectPlanSecurityReleaseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityReleaseTransaction;
/**
 * Type represention of an ISO-8601 date, e.g. 2022-01-28
 */
export type TypeDate7 = string;
/**
 * Net quantity of security units
 */
export type TypeNumeric16 = string;
/**
 * Quantity of security units sold
 */
export type TypeNumeric17 = string;
/**
 * Quantity of security units withheld
 */
export type TypeNumeric18 = string;
/**
 * Object describing a retraction of a convertible security
 */
export type ObjectConvertibleRetractionTransaction = ObjectConvertibleRetractionTransaction1 &
  ObjectConvertibleRetractionTransaction2;
export type ObjectConvertibleRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object describing a retraction of a plan security
 */
export type ObjectPlanSecurityRetractionTransaction = ObjectPlanSecurityRetractionTransaction1 &
  ObjectPlanSecurityRetractionTransaction2;
export type ObjectPlanSecurityRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object describing a retraction of a stock security
 */
export type ObjectStockRetractionTransaction = ObjectStockRetractionTransaction1 & ObjectStockRetractionTransaction2;
export type ObjectStockRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object describing a retraction of a warrant security
 */
export type ObjectWarrantRetractionTransaction = ObjectWarrantRetractionTransaction1 &
  ObjectWarrantRetractionTransaction2;
export type ObjectWarrantRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object describing a split of a stock class
 */
export type ObjectStockSplitTransaction = ObjectStockSplitTransaction1 & ObjectStockSplitTransaction2;
export type ObjectStockSplitTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveStockClassTransaction;
/**
 * Object describing a transfer or secondary sale of a convertible security
 */
export type ObjectConvertibleTransferTransaction = ObjectConvertibleTransferTransaction1 &
  ObjectConvertibleTransferTransaction2;
export type ObjectConvertibleTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];
/**
 * Object describing a transfer of a plan security
 */
export type ObjectPlanSecurityTransferTransaction = ObjectPlanSecurityTransferTransaction1 &
  ObjectPlanSecurityTransferTransaction2;
export type ObjectPlanSecurityTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric19 = string;
/**
 * Object describing a transfer or secondary sale of a stock security
 */
export type ObjectStockTransferTransaction = ObjectStockTransferTransaction1 & ObjectStockTransferTransaction2;
export type ObjectStockTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric20 = string;
/**
 * Object describing a transfer or secondary sale of a warrant security
 */
export type ObjectWarrantTransferTransaction = ObjectWarrantTransferTransaction1 & ObjectWarrantTransferTransaction2;
export type ObjectWarrantTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric21 = string;
/**
 * Object describing the transaction of vesting schedule start / commencement associated with a security
 */
export type ObjectVestingStartTransaction = ObjectVestingStartTransaction1 & ObjectVestingStartTransaction2;
export type ObjectVestingStartTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveSecurityTransaction;
/**
 * Object describing the transaction of an non-schedule-driven vesting event associated with a security
 */
export type ObjectVestingEventTransaction = ObjectVestingEventTransaction1 & ObjectVestingEventTransaction2;
export type ObjectVestingEventTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveSecurityTransaction;

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileTransactions2 {
  /**
   * List of OCF transaction objects
   */
  items: (
    | ObjectConvertibleAcceptanceTransaction
    | ObjectPlanSecurityAcceptanceTransaction
    | ObjectStockAcceptanceTransaction
    | ObjectWarrantAcceptanceTransaction
    | ObjectConvertibleCancellationTransaction
    | ObjectPlanSecurityCancellationTransaction
    | ObjectStockCancellationTransaction
    | ObjectWarrantCancellationTransaction
    | ObjectConvertibleConversionTransaction
    | ObjectStockConversionTransaction
    | ObjectPlanSecurityExerciseTransaction
    | ObjectWarrantExerciseTransaction
    | ObjectConvertibleIssuanceTransaction
    | ObjectPlanSecurityIssuanceTransaction
    | ObjectStockIssuanceTransaction
    | ObjectWarrantIssuanceTransaction
    | ObjectStockReIssuanceTransaction
    | ObjectStockRepurchaseTransaction
    | ObjectPlanSecurityReleaseTransaction
    | ObjectConvertibleRetractionTransaction
    | ObjectPlanSecurityRetractionTransaction
    | ObjectStockRetractionTransaction
    | ObjectWarrantRetractionTransaction
    | ObjectStockSplitTransaction
    | ObjectConvertibleTransferTransaction
    | ObjectPlanSecurityTransferTransaction
    | ObjectStockTransferTransaction
    | ObjectWarrantTransferTransaction
    | ObjectVestingStartTransaction
    | ObjectVestingEventTransaction
  )[];
  file_type: "OCF_TRANSACTIONS_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}
export interface ObjectConvertibleAcceptanceTransaction2 {
  object_type?: "TX_CONVERTIBLE_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}
export interface ObjectPlanSecurityAcceptanceTransaction2 {
  object_type?: "TX_PLAN_SECURITY_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}
export interface ObjectStockAcceptanceTransaction2 {
  object_type?: "TX_STOCK_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}
export interface ObjectWarrantAcceptanceTransaction2 {
  object_type?: "TX_WARRANT_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}
/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectConvertibleCancellationTransaction2 {
  object_type?: "TX_CONVERTIBLE_CANCELLATION";
  amount: TypeMonetary;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}
/**
 * Amount of monetary value cancelled
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectPlanSecurityCancellationTransaction2 {
  object_type?: "TX_PLAN_SECURITY_CANCELLATION";
  quantity: TypeNumeric1;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}
export interface ObjectStockCancellationTransaction2 {
  object_type?: "TX_STOCK_CANCELLATION";
  quantity: TypeNumeric2;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}
export interface ObjectWarrantCancellationTransaction2 {
  object_type?: "TX_WARRANT_CANCELLATION";
  quantity: TypeNumeric3;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}
/**
 * Abstract object describing fields common to all conversion transaction objects
 */
export interface PrimitiveSecurityConversionTransaction {
  resulting_security_ids: SecurityConversionResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectConvertibleConversionTransaction2 {
  object_type?: "TX_CONVERTIBLE_CONVERSION";
  /**
   * Reason for the conversion
   */
  reason_text: string;
  quantity_converted?: TypeNumeric4;
  /**
   * Identifier for the convertible that holds the remainder balance (for partial conversions)
   */
  balance_security_id?: string;
  /**
   * What is the id of the convertible's conversion trigger that resulted in this conversion
   */
  trigger_id: string;
  capitalization_definition?: TypeCapitalizationDefinition;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * If this conversion event was based on the company's capitalization as calculated at the time of conversion, please specify what stock classes, stock plans and securities were included in the calculation
 */
export interface TypeCapitalizationDefinition {
  /**
   * All issuances of stock classes with these ids should be included (unless such an issuance is specifically included in `exclude_security_ids`
   */
  include_stock_class_ids: string[];
  /**
   * All issuances of plan securities from stock plans with these ids should be included (unless such an issuance is specifically excluded in `exclude_security_ids`
   */
  include_stock_plans_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be included from this definition of capitalization (overrides plan or class-level rules)
   */
  include_security_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be excluded from this definition of capitalization (overrides plan or class-level rules)
   */
  exclude_security_ids: string[];
}
export interface ObjectStockConversionTransaction2 {
  object_type?: "TX_STOCK_CONVERSION";
  /**
   * Identifier for the security that holds the remainder balance (for partial conversions)
   */
  balance_security_id?: string;
  quantity_converted: TypeNumeric5;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * Abstract object describing fields common to all exercise transaction objects
 */
export interface PrimitiveSecurityExerciseTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security exercise
   */
  consideration_text?: string;
  resulting_security_ids: SecurityExerciseResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectPlanSecurityExerciseTransaction2 {
  object_type?: "TX_PLAN_SECURITY_EXERCISE";
  quantity: TypeNumeric6;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}
export interface ObjectWarrantExerciseTransaction2 {
  object_type?: "TX_WARRANT_EXERCISE";
  /**
   * What is the id of the warrant's exercise trigger that resulted in this exercise
   */
  trigger_id: string;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate1;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}
export interface ObjectConvertibleIssuanceTransaction2 {
  object_type?: "TX_CONVERTIBLE_ISSUANCE";
  investment_amount: TypeMonetary1;
  convertible_type: EnumConvertibleType;
  conversion_triggers: ConvertibleConversionTriggerArray;
  pro_rata?: TypeNumeric11;
  /**
   * If different convertible instruments have seniorty over one another, use this value to build a seniority stack, with 1 being highest seniority and equal seniority values assumed to be equal priority
   */
  seniority: number;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * Amount invested and outstanding on date of issuance of this convertible
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary2;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary2 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric7;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary3;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary3 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric8;
  denominator: TypeNumeric9;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric10;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric8;
  denominator: TypeNumeric9;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeAutomaticConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeAutomaticConversionOnDateTrigger2 {
  trigger_date: TypeDate2;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_DATE";
  conversion_right: unknown;
}
export interface TypeElectiveConversionAtWill2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_AT_WILL";
  conversion_right: unknown;
}
export interface TypeElectiveConversionInDateRangeTrigger2 {
  trigger_id: unknown;
  type: "ELECTIVE_IN_RANGE";
  start_date: TypeDate3;
  end_date: TypeDate4;
  nickname?: unknown;
  trigger_description?: unknown;
  conversion_right: unknown;
}
export interface TypeElectiveConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeUnspecifiedConversionTrigger2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "UNSPECIFIED";
  conversion_right: unknown;
}
export interface ObjectPlanSecurityIssuanceTransaction3 {
  object_type?: "TX_PLAN_SECURITY_ISSUANCE";
  /**
   * Identifier of StockPlan the PlanSecurities were issued from
   */
  stock_plan_id: string;
  compensation_type: EnumCompensationType;
  option_grant_type?: EnumOptionType;
  quantity: TypeNumeric12;
  exercise_price: TypeMonetary4;
  /**
   * Identifier of the VestingTerms to which this security is subject.  If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  /**
   * Expiration date of the plan security
   */
  expiration_date: null | TypeDate5;
  termination_exercise_windows: PlanSecurityTerminationWindowArray;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * What is the exercise price?
 */
export interface TypeMonetary4 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of a termination window
 */
export interface TypeTerminationWindow {
  reason: EnumTerminationWindowType;
  /**
   * The length of the period in this termination window (in number of periods of type period_type)
   */
  period: number;
  period_type: EnumPeriodType;
}
export interface ObjectStockIssuanceTransaction2 {
  object_type?: "TX_STOCK_ISSUANCE";
  /**
   * Identifier of the stock class for this stock issuance
   */
  stock_class_id: string;
  share_price: TypeMonetary5;
  quantity: TypeNumeric13;
  /**
   * Identifier of the VestingTerms to which this security is subject. If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  /**
   * The cost basis for this particular stock
   */
  cost_basis: TypeMonetary6 | TypePreReleaseOmission;
  stock_legend_ids: StockIssuanceStockLegendIDArray;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * The price per share paid for the stock by the holder
 */
export interface TypeMonetary5 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary6 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Transitional type; allows an otherwise "required" field to support omission by an implementation that can not yet support all fields. This is not intended to be permanent; rather it is a communication mechanism indicating that a field added in a pre-release version of the spec will need to be implemented to support the next release.
 */
export interface TypePreReleaseOmission {
  /**
   * Implementation-specific, optional message about missing data
   */
  comment?: string;
  /**
   * Positive indication of intentional omission
   */
  omitted: true;
}
export interface ObjectWarrantIssuanceTransaction2 {
  object_type?: "TX_WARRANT_ISSUANCE";
  quantity: TypeNumeric14;
  exercise_price: TypeMonetary7;
  purchase_price: TypeMonetary8;
  exercise_triggers: WarrantIssuanceExerciseTriggerArray;
  warrant_expiration_date?: TypeDate6;
  /**
   * Identifier of the VestingTerms to which this security is subject. If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary7 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary8 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Abstract object describing common properties to a reissuance of a security
 */
export interface PrimitiveSecurityReissuanceTransaction {
  resulting_security_ids: SecurityReissuanceResultingSecurityIDArray;
  split_transaction_id?: IdOfStockClassSplitTransaction;
  reason_text?: ReasonForStockReissuance;
  [k: string]: unknown;
}
export interface ObjectStockReIssuanceTransaction2 {
  object_type?: "TX_STOCK_REISSUANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
  split_transaction_id?: unknown;
  reason_text?: unknown;
}
/**
 * Abstract object describing common properties to a repurchase transaction
 */
export interface PrimitiveSecurityRepurchaseTransaction {
  price: TypeMonetary9;
  quantity: TypeNumeric15;
  /**
   * Unstructured text description of consideration provided in exchange for security repurchase
   */
  consideration_text?: string;
  resulting_security_ids?: SecurityRepurchaseResultingSecurityIDArray;
  [k: string]: unknown;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary9 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectStockRepurchaseTransaction2 {
  object_type?: "TX_STOCK_REPURCHASE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  price?: unknown;
  quantity?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * Abstract object describing fields common to all release transaction objects
 */
export interface PrimitiveSecurityReleaseTransaction {
  settlement_date: TypeDate7;
  release_price: TypeMonetary10;
  net_quantity?: TypeNumeric16;
  /**
   * Method of release
   */
  method?: string;
  /**
   * Whether this is a stock swap or not?
   */
  stock_swap?: boolean;
  cash_paid?: TypeMonetary11;
  quantity_sold?: TypeNumeric17;
  sale_price_per_unit?: TypeMonetary12;
  withheld_quantity?: TypeNumeric18;
  [k: string]: unknown;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary10 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary11 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary12 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectPlanSecurityReleaseTransaction2 {
  object_type?: "TX_PLAN_SECURITY_RELEASE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  settlement_date?: unknown;
  release_price?: unknown;
  net_quantity?: unknown;
  method?: unknown;
  stock_swap?: unknown;
  cash_paid?: unknown;
  quantity_sold?: unknown;
  sale_price_per_unit?: unknown;
  withheld_quantity?: unknown;
}
/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectConvertibleRetractionTransaction2 {
  object_type?: "TX_CONVERTIBLE_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}
export interface ObjectPlanSecurityRetractionTransaction2 {
  object_type?: "TX_PLAN_SECURITY_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}
export interface ObjectStockRetractionTransaction2 {
  object_type?: "TX_STOCK_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}
export interface ObjectWarrantRetractionTransaction2 {
  object_type?: "TX_WARRANT_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that affect the stock class
 */
export interface PrimitiveStockClassTransaction {
  /**
   * Identifier of the StockClass object, a subject of this transaction
   */
  stock_class_id: string;
  [k: string]: unknown;
}
export interface ObjectStockSplitTransaction2 {
  object_type?: "TX_STOCK_CLASS_SPLIT";
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  stock_class_id?: unknown;
  split_ratio: TypeRatio2;
}
/**
 * Ratio of new shares to old shares. For 2-for-1 split the numerator of the ratio is 2 and the denominator is 1.
 */
export interface TypeRatio2 {
  numerator: TypeNumeric8;
  denominator: TypeNumeric9;
}
/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectConvertibleTransferTransaction2 {
  object_type?: "TX_CONVERTIBLE_TRANSFER";
  amount: TypeMonetary13;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary13 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectPlanSecurityTransferTransaction2 {
  object_type?: "TX_PLAN_SECURITY_TRANSFER";
  quantity: TypeNumeric19;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}
export interface ObjectStockTransferTransaction2 {
  object_type?: "TX_STOCK_TRANSFER";
  quantity: TypeNumeric20;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}
export interface ObjectWarrantTransferTransaction2 {
  object_type?: "TX_WARRANT_TRANSFER";
  quantity: TypeNumeric21;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}
export interface ObjectVestingStartTransaction2 {
  object_type?: "TX_VESTING_START";
  /**
   * Reference to the `id` of a VestingCondition in this security's VestingTerms. This condition should have a trigger type of `VESTING_START_DATE`.
   */
  vesting_condition_id: string;
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  security_id?: unknown;
}
export interface ObjectVestingEventTransaction2 {
  object_type?: "TX_VESTING_EVENT";
  /**
   * Reference to the `id` of a VestingCondition in this security's VestingTerms. This condition should have a trigger type of `VESTING_EVENT`.
   */
  vesting_condition_id: string;
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  security_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of valuations
 */
export type FileValuations = FileValuations1 & FileValuations2;
export type FileValuations1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing a valuation used in the cap table
 */
export type ObjectValuation = ObjectValuation1 & ObjectValuation2;
export type ObjectValuation1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which board approved the valuation. This is essential for 409A valuations, in particular, which require the Board to approve the valuation.
 */
export type TypeDate = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Date on which this valuation is first valid
 */
export type TypeDate1 = string;
/**
 * Seam for supporting different types of valuations in future versions
 */
export type EnumValuationType = "409A";

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileValuations2 {
  /**
   * List of OCF valuation objects
   */
  items: ObjectValuation[];
  file_type: "OCF_VALUATIONS_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectValuation2 {
  object_type?: "VALUATION";
  /**
   * Entity which provided the valuation
   */
  provider?: string;
  board_approval_date?: TypeDate;
  price_per_share: TypeMonetary;
  effective_date: TypeDate1;
  valuation_type: EnumValuationType;
  id?: unknown;
  comments?: unknown;
}
/**
 * Valued price per share
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON containing file type identifier and list of vesting terms
 */
export type FileVestingTerms = FileVestingTerms1 & FileVestingTerms2;
export type FileVestingTerms1 = ObjectBaseFile;
/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";
/**
 * Object describing the terms under which a security vests
 */
export type ObjectVestingTerms = ObjectVestingTerms1 & ObjectVestingTerms2;
export type ObjectVestingTerms1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Allocation/rounding type for the vesting schedule
 */
export type EnumAllocationType =
  | "CUMULATIVE_ROUNDING"
  | "CUMULATIVE_ROUND_DOWN"
  | "FRONT_LOADED"
  | "BACK_LOADED"
  | "FRONT_LOADED_TO_SINGLE_TRANCHE"
  | "BACK_LOADED_TO_SINGLE_TRANCHE"
  | "FRACTIONAL";
/**
 * Describes condition / triggers to be satisfied for vesting to occur
 */
export type TypeVestingCondition = TypeVestingCondition1 & TypeVestingCondition2;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;
/**
 * If specified, the fixed amount of the whole security to vest, e.g. 10000 shares. Use `portion` for a proportional vesting amount.
 */
export type TypeNumeric2 = string;
/**
 * Describes a vesting condition satisfied at the security's vesting commencement date
 */
export type TypeVestingStartTrigger = TypeVestingStartTrigger1 & TypeVestingStartTrigger2;
export type TypeVestingStartTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";
/**
 * Describes a vesting condition satisfied on an absolute date.
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * The date on which this condition triggers.
 */
export type TypeDate = string;
/**
 * Describes a vesting condition satisfied when a period of time, relative to another vesting condition, has elapsed.
 */
export type TypeVestingEventTrigger3 = TypeVestingEventTrigger4 & TypeVestingEventTrigger5;
export type TypeVestingEventTrigger4 = PrimitiveVestingConditionTriggerType;
/**
 * Describes a period of time expressed in days (e.g. 365 days) for use in Vesting Terms
 */
export type TypeVestingPeriodInDays = TypeVestingPeriodInDays1 & TypeVestingPeriodInDays2;
export type TypeVestingPeriodInDays1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Describes a period of time expressed in months (e.g. 3 months) for use in Vesting Terms.
 */
export type TypeVestingPeriodInMonths = TypeVestingPeriodInMonths1 & TypeVestingPeriodInMonths2;
export type TypeVestingPeriodInMonths1 = PrimitiveVestingPeriodType;
/**
 * The calendar day of a month to award vesting.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";
/**
 * Describes a vesting condition satisfied when a particular unscheduled event occurs
 */
export type TypeVestingEventTrigger6 = TypeVestingEventTrigger7 & TypeVestingEventTrigger8;
export type TypeVestingEventTrigger7 = PrimitiveVestingConditionTriggerType;
export type TypeVestingCondition2 =
  | {
      [k: string]: unknown;
    }
  | {
      [k: string]: unknown;
    };

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}
export interface FileVestingTerms2 {
  /**
   * List of OCF vesting terms objects
   */
  items: ObjectVestingTerms[];
  file_type: "OCF_VESTING_TERMS_FILE";
}
/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectVestingTerms2 {
  object_type?: "VESTING_TERMS";
  /**
   * Concise name for the vesting schedule
   */
  name: string;
  /**
   * Detailed description of the vesting schedule
   */
  description: string;
  allocation_type: EnumAllocationType;
  /**
   * Conditions and triggers that describe the graph of vesting schedules and events
   *
   * @minItems 1
   */
  vesting_conditions: [TypeVestingCondition, ...TypeVestingCondition2[]];
  id?: unknown;
  comments?: unknown;
}
export interface TypeVestingCondition1 {
  /**
   * Reference identifier for this condition
   */
  id: string;
  /**
   * Detailed description of the condition
   */
  description?: string;
  portion?: TypeVestingConditionPortion;
  quantity?: TypeNumeric2;
  /**
   * Describes how this vesting condition is met, resulting in vesting the specified tranche of shares
   */
  trigger: TypeVestingStartTrigger | TypeVestingEventTrigger | TypeVestingEventTrigger3 | TypeVestingEventTrigger6;
  /**
   * List of ALL VestingCondition IDs that can trigger after this one. If there are none, use an empty array.
   * Conditions should be in priority order in the array, ordered from the highest priority to the lowest.
   */
  next_condition_ids: string[];
}
/**
 * If specified, the fractional part of the whole security that is vested, e.g. 25:100 for 25%. Use `quantity` for a fixed vesting amount.
 */
export interface TypeVestingConditionPortion {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
  /**
   * If false, the ratio is applied to the entire quantity of the security's issuance. If true, it is applied to the amount that has yet to vest. For example:
   *  A stakeholder has been granted 1000 shares, and 400 are already vested.
   * If the portion is 1/5 and `remainder` is `false` for a VestingCondition, then that condition will vest 200 shares -- 1/5 of the 1000 granted.
   * If the portion is 1/5 and `remainder` is `true`, then that condition will vest 120 shares -- 1/5 of the 600 unvested.
   */
  remainder?: boolean;
}
/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingStartTrigger2 {
  type?: "VESTING_START_DATE";
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_SCHEDULE_ABSOLUTE";
  date: TypeDate;
}
export interface TypeVestingEventTrigger5 {
  type?: "VESTING_SCHEDULE_RELATIVE";
  /**
   * The span of time that must have elapsed since the condition `relative_to_condition_id` occurred for this condition to trigger. For weeks or "ideal" years (365 days), use `VestingPeriodInDays`. For calendar years use `VestingPeriodInMonths`.
   */
  period: TypeVestingPeriodInDays | TypeVestingPeriodInMonths;
  /**
   * Reference to the vesting condition ID to which the `period` is relative
   */
  relative_to_condition_id: string;
}
/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInDays2 {
  length?: unknown;
  type?: "DAYS";
  occurrences?: unknown;
}
export interface TypeVestingPeriodInMonths2 {
  length?: unknown;
  type?: "MONTHS";
  occurrences?: unknown;
  day_of_month: EnumVestingDayOfMonth;
}
export interface TypeVestingEventTrigger8 {
  type?: "VESTING_EVENT";
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing the issuer of the cap table (the company whose cap table this is)
 */
export type ObjectIssuer = ObjectIssuer1 & ObjectIssuer2;
export type ObjectIssuer1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date of formation
 */
export type TypeDate = string;
/**
 * The country where the issuer company was legally formed (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * The state, province, or subdivision where the issuer company was legally formed
 */
export type TypeCountrySubdivisionCode = string;
/**
 * Issuing country code (ISO 3166-1 alpha-2) for the tax identifier
 */
export type TypeCountryCode1 = string;
/**
 * The tax ids for this issuer company
 */
export type IssuerTaxIDArray = TypeTaxIdentifier[];
/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";
/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";
/**
 * What type of address is this (e.g. legal address, contact address, etc.)
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";
/**
 * State, province, or equivalent identifier required for an address in this country
 */
export type TypeCountrySubdivisionCode1 = string;
/**
 * Country code for this address (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode2 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectIssuer2 {
  object_type?: "ISSUER";
  /**
   * Legal name of the issuer
   */
  legal_name: string;
  /**
   * Doing Business As name
   */
  dba?: string;
  formation_date: TypeDate;
  country_of_formation: TypeCountryCode;
  country_subdivision_of_formation?: TypeCountrySubdivisionCode;
  tax_ids?: IssuerTaxIDArray;
  email?: TypeEmail;
  phone?: TypePhone;
  address?: TypeAddress;
  id?: unknown;
  comments?: unknown;
}
/**
 * Type representation of a government identifier for tax purposes (e.g. EIN) and corresponding country code (ISO-3166)
 */
export interface TypeTaxIdentifier {
  /**
   * Tax identifier as string
   */
  tax_id: string;
  country: TypeCountryCode1;
}
/**
 * A work email that the issuer company can be reached at
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}
/**
 * A phone number that the issuer company can be reached at
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}
/**
 * The headquarters address of the issuing company
 */
export interface TypeAddress {
  address_type: EnumAddressType;
  /**
   * Street address (multi-line string)
   */
  street_suite?: string;
  /**
   * City
   */
  city?: string;
  country_subdivision?: TypeCountrySubdivisionCode1;
  country: TypeCountryCode2;
  /**
   * Address postal code
   */
  postal_code?: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a stakeholder
 */
export type ObjectStakeholder = ObjectStakeholder1 & ObjectStakeholder2;
export type ObjectStakeholder1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Distinguish individuals from institutions
 */
export type EnumStakeholderType = "INDIVIDUAL" | "INSTITUTION";
/**
 * What is the current relationship of the stakeholder to the issuer?
 */
export type EnumStakeholderRelationshipType =
  | "ADVISOR"
  | "BOARD_MEMBER"
  | "CONSULTANT"
  | "EMPLOYEE"
  | "EX_ADVISOR"
  | "EX_CONSULTANT"
  | "EX_EMPLOYEE"
  | "EXECUTIVE"
  | "FOUNDER"
  | "INVESTOR"
  | "NON_US_EMPLOYEE"
  | "OFFICER"
  | "OTHER";
/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";
/**
 * Phone numbers to reach the contact at
 */
export type ContactInfoPhoneNumberArray = TypePhone[];
/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";
/**
 * Emails to reach the contact at
 */
export type ContactInfoEmailAddressArray = TypeEmail[];
/**
 * What type of address is this (e.g. legal address, contact address, etc.)
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";
/**
 * State, province, or equivalent identifier required for an address in this country
 */
export type TypeCountrySubdivisionCode = string;
/**
 * Country code for this address (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * Addresses for the stakeholder
 */
export type StakeholderAddressArray = TypeAddress[];
/**
 * Issuing country code (ISO 3166-1 alpha-2) for the tax identifier
 */
export type TypeCountryCode1 = string;
/**
 * The tax ids for this stakeholder
 */
export type StakeholderTaxIDArray = TypeTaxIdentifier[];

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStakeholder2 {
  object_type?: "STAKEHOLDER";
  name: TypeName;
  stakeholder_type: EnumStakeholderType;
  /**
   * This might be any sort of id assigned to the stakeholder by the issuer, such as an internal company ID for an employee stakeholder
   */
  issuer_assigned_id?: string;
  current_relationship?: EnumStakeholderRelationshipType;
  primary_contact?: TypeContactInfo;
  addresses?: StakeholderAddressArray;
  tax_ids?: StakeholderTaxIDArray;
  id?: unknown;
  comments?: unknown;
}
/**
 * Name for the stakeholder
 */
export interface TypeName {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}
/**
 * The primary contact info for the stakeholder
 */
export interface TypeContactInfo {
  name: TypeName1;
  phone_numbers: ContactInfoPhoneNumberArray;
  emails: ContactInfoEmailAddressArray;
}
/**
 * Contact's name
 */
export interface TypeName1 {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}
/**
 * Type representation of a phone number
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}
/**
 * Type representation of an email address
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}
/**
 * Type representation of an address
 */
export interface TypeAddress {
  address_type: EnumAddressType;
  /**
   * Street address (multi-line string)
   */
  street_suite?: string;
  /**
   * City
   */
  city?: string;
  country_subdivision?: TypeCountrySubdivisionCode;
  country: TypeCountryCode;
  /**
   * Address postal code
   */
  postal_code?: string;
}
/**
 * Type representation of a government identifier for tax purposes (e.g. EIN) and corresponding country code (ISO-3166)
 */
export interface TypeTaxIdentifier {
  /**
   * Tax identifier as string
   */
  tax_id: string;
  country: TypeCountryCode1;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a class of stock issued by the issuer
 */
export type ObjectStockClass = ObjectStockClass1 & ObjectStockClass2;
export type ObjectStockClass1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * The type of this stock class (e.g. Preferred or Common)
 */
export type EnumStockClassType = "COMMON" | "PREFERRED";
/**
 * The most current number of shares authorized for this stock class
 */
export type TypeNumeric = string;
/**
 * Date on which the board approved the stock class
 */
export type TypeDate = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric1 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric2 = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric3 = string;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric4 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric5 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric6 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric7 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * List of stock class conversion rights possible for this stock class
 */
export type StockClassStockClassConversionRightsArray = TypeStockClassConversionRights[];
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric8 = string;
/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric9 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockClass2 {
  object_type?: "STOCK_CLASS";
  /**
   * Name for the stock type (e.g. Series A Preferred or Class A Common)
   */
  name: string;
  class_type: EnumStockClassType;
  /**
   * Default prefix for certificate numbers in certificated shares (e.g. CS- in CS-1). If certificate IDs have a dash, the prefix should end in the dash like CS-
   */
  default_id_prefix: string;
  current_shares_authorized: TypeNumeric;
  board_approval_date: TypeDate;
  /**
   * The number of votes each share of this stock class gets
   */
  votes_per_share: TypeNumeric1 | TypePreReleaseOmission;
  par_value?: TypeMonetary;
  price_per_share?: TypeMonetary1;
  seniority: TypeNumeric3;
  conversion_rights?: StockClassStockClassConversionRightsArray;
  liquidation_preference_multiple?: TypeNumeric8;
  participation_cap_multiple?: TypeNumeric9;
  id?: unknown;
  comments?: unknown;
}
/**
 * Transitional type; allows an otherwise "required" field to support omission by an implementation that can not yet support all fields. This is not intended to be permanent; rather it is a communication mechanism indicating that a field added in a pre-release version of the spec will need to be implemented to support the next release.
 */
export interface TypePreReleaseOmission {
  /**
   * Implementation-specific, optional message about missing data
   */
  comment?: string;
  /**
   * Positive indication of intentional omission
   */
  omitted: true;
}
/**
 * Per-share par value of this stock class
 */
export interface TypeMonetary {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * Per-share price this stock class was issued for
 */
export interface TypeMonetary1 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary2;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary2 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric4;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary3;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary3 {
  amount: TypeNumeric2;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric5;
  denominator: TypeNumeric6;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric7;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric5;
  denominator: TypeNumeric6;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a stock legend template
 */
export type ObjectStockLegendTemplate = ObjectStockLegendTemplate1 & ObjectStockLegendTemplate2;
export type ObjectStockLegendTemplate1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockLegendTemplate2 {
  object_type?: "STOCK_LEGEND_TEMPLATE";
  /**
   * Name for the stock legend template
   */
  name: string;
  /**
   * The full text of the stock legend
   */
  text: string;
  id?: unknown;
  comments?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a plan which stock options are issued from
 */
export type ObjectStockPlan = ObjectStockPlan1 & ObjectStockPlan2;
export type ObjectStockPlan1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which board approved the plan
 */
export type TypeDate = string;
/**
 * This optional field tracks when the stockholders approved this stock plan. This is intended for use by US companies that want to issue Incentive Stock Options (ISOs), as the issuing StockPlan must receive shareholder approval within a specified time frame in order to issue valid ISOs.
 */
export type TypeDate1 = string;
/**
 * The most recent number of shares reserved in the pool for this stock plan by the Board or equivalent body. Actual shares issued and outstanding from the pool should be determined by traversing the event stack. The plan's reserved share history (e.g. previous `current_shares_reserved` amounts) is not available in OCF version 1.
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectStockPlan2 {
  object_type?: "STOCK_PLAN";
  /**
   * Name for the stock plan
   */
  plan_name: string;
  board_approval_date?: TypeDate;
  stockholder_approval_date?: TypeDate1;
  current_shares_reserved: TypeNumeric;
  /**
   * Identifier of the StockClass object this plan is composed of
   */
  stock_class_id: string;
  id?: unknown;
  comments?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a valuation used in the cap table
 */
export type ObjectValuation = ObjectValuation1 & ObjectValuation2;
export type ObjectValuation1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which board approved the valuation. This is essential for 409A valuations, in particular, which require the Board to approve the valuation.
 */
export type TypeDate = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Date on which this valuation is first valid
 */
export type TypeDate1 = string;
/**
 * Seam for supporting different types of valuations in future versions
 */
export type EnumValuationType = "409A";

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectValuation2 {
  object_type?: "VALUATION";
  /**
   * Entity which provided the valuation
   */
  provider?: string;
  board_approval_date?: TypeDate;
  price_per_share: TypeMonetary;
  effective_date: TypeDate1;
  valuation_type: EnumValuationType;
  id?: unknown;
  comments?: unknown;
}
/**
 * Valued price per share
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing the terms under which a security vests
 */
export type ObjectVestingTerms = ObjectVestingTerms1 & ObjectVestingTerms2;
export type ObjectVestingTerms1 = PrimitiveBaseObject;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Allocation/rounding type for the vesting schedule
 */
export type EnumAllocationType =
  | "CUMULATIVE_ROUNDING"
  | "CUMULATIVE_ROUND_DOWN"
  | "FRONT_LOADED"
  | "BACK_LOADED"
  | "FRONT_LOADED_TO_SINGLE_TRANCHE"
  | "BACK_LOADED_TO_SINGLE_TRANCHE"
  | "FRACTIONAL";
/**
 * Describes condition / triggers to be satisfied for vesting to occur
 */
export type TypeVestingCondition = TypeVestingCondition1 & TypeVestingCondition2;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;
/**
 * If specified, the fixed amount of the whole security to vest, e.g. 10000 shares. Use `portion` for a proportional vesting amount.
 */
export type TypeNumeric2 = string;
/**
 * Describes a vesting condition satisfied at the security's vesting commencement date
 */
export type TypeVestingStartTrigger = TypeVestingStartTrigger1 & TypeVestingStartTrigger2;
export type TypeVestingStartTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";
/**
 * Describes a vesting condition satisfied on an absolute date.
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * The date on which this condition triggers.
 */
export type TypeDate = string;
/**
 * Describes a vesting condition satisfied when a period of time, relative to another vesting condition, has elapsed.
 */
export type TypeVestingEventTrigger3 = TypeVestingEventTrigger4 & TypeVestingEventTrigger5;
export type TypeVestingEventTrigger4 = PrimitiveVestingConditionTriggerType;
/**
 * Describes a period of time expressed in days (e.g. 365 days) for use in Vesting Terms
 */
export type TypeVestingPeriodInDays = TypeVestingPeriodInDays1 & TypeVestingPeriodInDays2;
export type TypeVestingPeriodInDays1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Describes a period of time expressed in months (e.g. 3 months) for use in Vesting Terms.
 */
export type TypeVestingPeriodInMonths = TypeVestingPeriodInMonths1 & TypeVestingPeriodInMonths2;
export type TypeVestingPeriodInMonths1 = PrimitiveVestingPeriodType;
/**
 * The calendar day of a month to award vesting.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";
/**
 * Describes a vesting condition satisfied when a particular unscheduled event occurs
 */
export type TypeVestingEventTrigger6 = TypeVestingEventTrigger7 & TypeVestingEventTrigger8;
export type TypeVestingEventTrigger7 = PrimitiveVestingConditionTriggerType;
export type TypeVestingCondition2 =
  | {
      [k: string]: unknown;
    }
  | {
      [k: string]: unknown;
    };

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
export interface ObjectVestingTerms2 {
  object_type?: "VESTING_TERMS";
  /**
   * Concise name for the vesting schedule
   */
  name: string;
  /**
   * Detailed description of the vesting schedule
   */
  description: string;
  allocation_type: EnumAllocationType;
  /**
   * Conditions and triggers that describe the graph of vesting schedules and events
   *
   * @minItems 1
   */
  vesting_conditions: [TypeVestingCondition, ...TypeVestingCondition2[]];
  id?: unknown;
  comments?: unknown;
}
export interface TypeVestingCondition1 {
  /**
   * Reference identifier for this condition
   */
  id: string;
  /**
   * Detailed description of the condition
   */
  description?: string;
  portion?: TypeVestingConditionPortion;
  quantity?: TypeNumeric2;
  /**
   * Describes how this vesting condition is met, resulting in vesting the specified tranche of shares
   */
  trigger: TypeVestingStartTrigger | TypeVestingEventTrigger | TypeVestingEventTrigger3 | TypeVestingEventTrigger6;
  /**
   * List of ALL VestingCondition IDs that can trigger after this one. If there are none, use an empty array.
   * Conditions should be in priority order in the array, ordered from the highest priority to the lowest.
   */
  next_condition_ids: string[];
}
/**
 * If specified, the fractional part of the whole security that is vested, e.g. 25:100 for 25%. Use `quantity` for a fixed vesting amount.
 */
export interface TypeVestingConditionPortion {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
  /**
   * If false, the ratio is applied to the entire quantity of the security's issuance. If true, it is applied to the amount that has yet to vest. For example:
   *  A stakeholder has been granted 1000 shares, and 400 are already vested.
   * If the portion is 1/5 and `remainder` is `false` for a VestingCondition, then that condition will vest 200 shares -- 1/5 of the 1000 granted.
   * If the portion is 1/5 and `remainder` is `true`, then that condition will vest 120 shares -- 1/5 of the 600 unvested.
   */
  remainder?: boolean;
}
/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingStartTrigger2 {
  type?: "VESTING_START_DATE";
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_SCHEDULE_ABSOLUTE";
  date: TypeDate;
}
export interface TypeVestingEventTrigger5 {
  type?: "VESTING_SCHEDULE_RELATIVE";
  /**
   * The span of time that must have elapsed since the condition `relative_to_condition_id` occurred for this condition to trigger. For weeks or "ideal" years (365 days), use `VestingPeriodInDays`. For calendar years use `VestingPeriodInMonths`.
   */
  period: TypeVestingPeriodInDays | TypeVestingPeriodInMonths;
  /**
   * Reference to the vesting condition ID to which the `period` is relative
   */
  relative_to_condition_id: string;
}
/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInDays2 {
  length?: unknown;
  type?: "DAYS";
  occurrences?: unknown;
}
export interface TypeVestingPeriodInMonths2 {
  length?: unknown;
  type?: "MONTHS";
  occurrences?: unknown;
  day_of_month: EnumVestingDayOfMonth;
}
export interface TypeVestingEventTrigger8 {
  type?: "VESTING_EVENT";
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a convertible acceptance transaction
 */
export type ObjectConvertibleAcceptanceTransaction = ObjectConvertibleAcceptanceTransaction1 &
  ObjectConvertibleAcceptanceTransaction2;
export type ObjectConvertibleAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}
export interface ObjectConvertibleAcceptanceTransaction2 {
  object_type?: "TX_CONVERTIBLE_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a plan security acceptance transaction
 */
export type ObjectPlanSecurityAcceptanceTransaction = ObjectPlanSecurityAcceptanceTransaction1 &
  ObjectPlanSecurityAcceptanceTransaction2;
export type ObjectPlanSecurityAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}
export interface ObjectPlanSecurityAcceptanceTransaction2 {
  object_type?: "TX_PLAN_SECURITY_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a stock acceptance transaction
 */
export type ObjectStockAcceptanceTransaction = ObjectStockAcceptanceTransaction1 & ObjectStockAcceptanceTransaction2;
export type ObjectStockAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}
export interface ObjectStockAcceptanceTransaction2 {
  object_type?: "TX_STOCK_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a warrant acceptance transaction
 */
export type ObjectWarrantAcceptanceTransaction = ObjectWarrantAcceptanceTransaction1 &
  ObjectWarrantAcceptanceTransaction2;
export type ObjectWarrantAcceptanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityAcceptanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}
export interface ObjectWarrantAcceptanceTransaction2 {
  object_type?: "TX_WARRANT_ACCEPTANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a cancellation of a convertible security
 */
export type ObjectConvertibleCancellationTransaction = ObjectConvertibleCancellationTransaction1 &
  ObjectConvertibleCancellationTransaction2;
export type ObjectConvertibleCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectConvertibleCancellationTransaction2 {
  object_type?: "TX_CONVERTIBLE_CANCELLATION";
  amount: TypeMonetary;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}
/**
 * Amount of monetary value cancelled
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a cancellation of a plan security
 */
export type ObjectPlanSecurityCancellationTransaction = ObjectPlanSecurityCancellationTransaction1 &
  ObjectPlanSecurityCancellationTransaction2;
export type ObjectPlanSecurityCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectPlanSecurityCancellationTransaction2 {
  object_type?: "TX_PLAN_SECURITY_CANCELLATION";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a cancellation of a stock security
 */
export type ObjectStockCancellationTransaction = ObjectStockCancellationTransaction1 &
  ObjectStockCancellationTransaction2;
export type ObjectStockCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectStockCancellationTransaction2 {
  object_type?: "TX_STOCK_CANCELLATION";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a cancellation of a warrant security
 */
export type ObjectWarrantCancellationTransaction = ObjectWarrantCancellationTransaction1 &
  ObjectWarrantCancellationTransaction2;
export type ObjectWarrantCancellationTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityCancellationTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Quantity of non-monetary security units cancelled
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectWarrantCancellationTransaction2 {
  object_type?: "TX_WARRANT_CANCELLATION";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  balance_security_id?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a conversion of a convertible security
 */
export type ObjectConvertibleConversionTransaction = ObjectConvertibleConversionTransaction1 &
  ObjectConvertibleConversionTransaction2;
export type ObjectConvertibleConversionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityConversionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Identifier for the security (or securities) that resulted from the conversion
 */
export type SecurityConversionResultingSecurityIDArray = string[];
/**
 * Quantity of security units converted
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all conversion transaction objects
 */
export interface PrimitiveSecurityConversionTransaction {
  resulting_security_ids: SecurityConversionResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectConvertibleConversionTransaction2 {
  object_type?: "TX_CONVERTIBLE_CONVERSION";
  /**
   * Reason for the conversion
   */
  reason_text: string;
  quantity_converted?: TypeNumeric;
  /**
   * Identifier for the convertible that holds the remainder balance (for partial conversions)
   */
  balance_security_id?: string;
  /**
   * What is the id of the convertible's conversion trigger that resulted in this conversion
   */
  trigger_id: string;
  capitalization_definition?: TypeCapitalizationDefinition;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * If this conversion event was based on the company's capitalization as calculated at the time of conversion, please specify what stock classes, stock plans and securities were included in the calculation
 */
export interface TypeCapitalizationDefinition {
  /**
   * All issuances of stock classes with these ids should be included (unless such an issuance is specifically included in `exclude_security_ids`
   */
  include_stock_class_ids: string[];
  /**
   * All issuances of plan securities from stock plans with these ids should be included (unless such an issuance is specifically excluded in `exclude_security_ids`
   */
  include_stock_plans_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be included from this definition of capitalization (overrides plan or class-level rules)
   */
  include_security_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be excluded from this definition of capitalization (overrides plan or class-level rules)
   */
  exclude_security_ids: string[];
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a conversion of stock
 */
export type ObjectStockConversionTransaction = ObjectStockConversionTransaction1 & ObjectStockConversionTransaction2;
export type ObjectStockConversionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityConversionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Identifier for the security (or securities) that resulted from the conversion
 */
export type SecurityConversionResultingSecurityIDArray = string[];
/**
 * Quantity of non-monetary security units converted
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all conversion transaction objects
 */
export interface PrimitiveSecurityConversionTransaction {
  resulting_security_ids: SecurityConversionResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectStockConversionTransaction2 {
  object_type?: "TX_STOCK_CONVERSION";
  /**
   * Identifier for the security that holds the remainder balance (for partial conversions)
   */
  balance_security_id?: string;
  quantity_converted: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a plan security exercise transaction
 */
export type ObjectPlanSecurityExerciseTransaction = ObjectPlanSecurityExerciseTransaction1 &
  ObjectPlanSecurityExerciseTransaction2;
export type ObjectPlanSecurityExerciseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityExerciseTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Identifier for the security (or securities) that resulted from the exercise
 */
export type SecurityExerciseResultingSecurityIDArray = string[];
/**
 * Quantity of shares exercised
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all exercise transaction objects
 */
export interface PrimitiveSecurityExerciseTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security exercise
   */
  consideration_text?: string;
  resulting_security_ids: SecurityExerciseResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectPlanSecurityExerciseTransaction2 {
  object_type?: "TX_PLAN_SECURITY_EXERCISE";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a warrant exercise transaction
 */
export type ObjectWarrantExerciseTransaction = ObjectWarrantExerciseTransaction1 & ObjectWarrantExerciseTransaction2;
export type ObjectWarrantExerciseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityExerciseTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Identifier for the security (or securities) that resulted from the exercise
 */
export type SecurityExerciseResultingSecurityIDArray = string[];

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all exercise transaction objects
 */
export interface PrimitiveSecurityExerciseTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security exercise
   */
  consideration_text?: string;
  resulting_security_ids: SecurityExerciseResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectWarrantExerciseTransaction2 {
  object_type?: "TX_WARRANT_EXERCISE";
  /**
   * What is the id of the warrant's exercise trigger that resulted in this exercise
   */
  trigger_id: string;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing convertible instrument issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectConvertibleIssuanceTransaction = ObjectConvertibleIssuanceTransaction1 &
  ObjectConvertibleIssuanceTransaction2;
export type ObjectConvertibleIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Date of board approval for the security
 */
export type TypeDate1 = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * What kind of convertible instrument is this (of the supported, enumerated types)
 */
export type EnumConvertibleType = "NOTE" | "SAFE" | "CONVERTIBLE_SECURITY";
/**
 * In event the convertible can convert due to trigger events (e.g. Maturity, Next Qualified Financing, Change of Control, at Election of Holder), what are the terms?
 *
 * @minItems 1
 */
export type ConvertibleConversionTriggerArray = [
  (
    | TypeAutomaticConversionOnConditionTrigger
    | TypeAutomaticConversionOnDateTrigger
    | TypeElectiveConversionAtWill
    | TypeElectiveConversionInDateRangeTrigger
    | TypeElectiveConversionOnConditionTrigger
    | TypeUnspecifiedConversionTrigger
  ),
  ...(
    | TypeAutomaticConversionOnConditionTrigger
    | TypeAutomaticConversionOnDateTrigger
    | TypeElectiveConversionAtWill
    | TypeElectiveConversionInDateRangeTrigger
    | TypeElectiveConversionOnConditionTrigger
    | TypeUnspecifiedConversionTrigger
  )[]
];
/**
 * Type representation of automatic trigger on a tive or condition.
 */
export type TypeAutomaticConversionOnConditionTrigger = TypeAutomaticConversionOnConditionTrigger1 &
  TypeAutomaticConversionOnConditionTrigger2;
export type TypeAutomaticConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of an automatic trigger on a date.
 */
export type TypeAutomaticConversionOnDateTrigger = TypeAutomaticConversionOnDateTrigger1 &
  TypeAutomaticConversionOnDateTrigger2;
export type TypeAutomaticConversionOnDateTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Date on which trigger occurs automatically (if it hasn't already occured)
 */
export type TypeDate2 = string;
/**
 * Type representation of elective trigger valid at will (so long as instrument is valid and outstanding).
 */
export type TypeElectiveConversionAtWill = TypeElectiveConversionAtWill1 & TypeElectiveConversionAtWill2;
export type TypeElectiveConversionAtWill1 = PrimitiveBaseConversionTriggerType;
/**
 * Type representation of elective trigger valid on or after start_date and until or before end_date.
 */
export type TypeElectiveConversionInDateRangeTrigger = TypeElectiveConversionInDateRangeTrigger1 &
  TypeElectiveConversionInDateRangeTrigger2;
export type TypeElectiveConversionInDateRangeTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Start date of range (inclusive)
 */
export type TypeDate3 = string;
/**
 * End date of range (inclusive)
 */
export type TypeDate4 = string;
/**
 * Type representation of elective trigger on fulfillment of a condition.
 */
export type TypeElectiveConversionOnConditionTrigger = TypeElectiveConversionOnConditionTrigger1 &
  TypeElectiveConversionOnConditionTrigger2;
export type TypeElectiveConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Use this where no structured data is available regarding what triggers the conversion of a given security.
 */
export type TypeUnspecifiedConversionTrigger = TypeUnspecifiedConversionTrigger1 & TypeUnspecifiedConversionTrigger2;
export type TypeUnspecifiedConversionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * What pro-rata (if any) is the holder entitled to buy at the next round?
 */
export type TypeNumeric5 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate1;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}
export interface ObjectConvertibleIssuanceTransaction2 {
  object_type?: "TX_CONVERTIBLE_ISSUANCE";
  investment_amount: TypeMonetary;
  convertible_type: EnumConvertibleType;
  conversion_triggers: ConvertibleConversionTriggerArray;
  pro_rata?: TypeNumeric5;
  /**
   * If different convertible instruments have seniorty over one another, use this value to build a seniority stack, with 1 being highest seniority and equal seniority values assumed to be equal priority
   */
  seniority: number;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * Amount invested and outstanding on date of issuance of this convertible
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary1;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary2;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary2 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeAutomaticConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeAutomaticConversionOnDateTrigger2 {
  trigger_date: TypeDate2;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_DATE";
  conversion_right: unknown;
}
export interface TypeElectiveConversionAtWill2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_AT_WILL";
  conversion_right: unknown;
}
export interface TypeElectiveConversionInDateRangeTrigger2 {
  trigger_id: unknown;
  type: "ELECTIVE_IN_RANGE";
  start_date: TypeDate3;
  end_date: TypeDate4;
  nickname?: unknown;
  trigger_description?: unknown;
  conversion_right: unknown;
}
export interface TypeElectiveConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeUnspecifiedConversionTrigger2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "UNSPECIFIED";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing securities issuance transaction from a plan by the issuer and held by a stakeholder
 */
export type ObjectPlanSecurityIssuanceTransaction = ObjectPlanSecurityIssuanceTransaction1 &
  ObjectPlanSecurityIssuanceTransaction2 &
  ObjectPlanSecurityIssuanceTransaction3;
export type ObjectPlanSecurityIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Date of board approval for the security
 */
export type TypeDate1 = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];
export type ObjectPlanSecurityIssuanceTransaction2 =
  | {
      compensation_type?: "OPTION";
      [k: string]: unknown;
    }
  | {
      compensation_type?: "RSU";
      [k: string]: unknown;
    };
/**
 * If the plan security is compensation, what kind?
 */
export type EnumCompensationType = "OPTION" | "RSU";
/**
 * If the plan security is an option, what kind?
 */
export type EnumOptionType = "NSO" | "ISO" | "INTL";
/**
 * How many shares are subject to this plan security?
 */
export type TypeNumeric = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric1 = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Type represention of an ISO-8601 date, e.g. 2022-01-28
 */
export type TypeDate2 = string;
/**
 * What cause of termination is this window for?
 */
export type EnumTerminationWindowType =
  | "VOLUNTARY_OTHER"
  | "VOLUNTARY_GOOD_CAUSE"
  | "VOLUNTARY_RETIREMENT"
  | "INVOLUNTARY_OTHER"
  | "INVOLUNTARY_DEATH"
  | "INVOLUNTARY_DISABILITY"
  | "INVOLUNTARY_WITH_CAUSE";
/**
 * The type of period being measured (e.g. days or month)
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Exercise periods applicable to plan security after a termination for a given, enumerated reason
 */
export type PlanSecurityTerminationWindowArray = TypeTerminationWindow[];

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate1;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}
export interface ObjectPlanSecurityIssuanceTransaction3 {
  object_type?: "TX_PLAN_SECURITY_ISSUANCE";
  /**
   * Identifier of StockPlan the PlanSecurities were issued from
   */
  stock_plan_id: string;
  compensation_type: EnumCompensationType;
  option_grant_type?: EnumOptionType;
  quantity: TypeNumeric;
  exercise_price: TypeMonetary;
  /**
   * Identifier of the VestingTerms to which this security is subject.  If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  /**
   * Expiration date of the plan security
   */
  expiration_date: null | TypeDate2;
  termination_exercise_windows: PlanSecurityTerminationWindowArray;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * What is the exercise price?
 */
export interface TypeMonetary {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of a termination window
 */
export interface TypeTerminationWindow {
  reason: EnumTerminationWindowType;
  /**
   * The length of the period in this termination window (in number of periods of type period_type)
   */
  period: number;
  period_type: EnumPeriodType;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a stock issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectStockIssuanceTransaction = ObjectStockIssuanceTransaction1 & ObjectStockIssuanceTransaction2;
export type ObjectStockIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Date of board approval for the security
 */
export type TypeDate1 = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Number of shares issued to the stakeholder
 */
export type TypeNumeric1 = string;
/**
 * List of stock legend ids that apply to this stock
 */
export type StockIssuanceStockLegendIDArray = string[];

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate1;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}
export interface ObjectStockIssuanceTransaction2 {
  object_type?: "TX_STOCK_ISSUANCE";
  /**
   * Identifier of the stock class for this stock issuance
   */
  stock_class_id: string;
  share_price: TypeMonetary;
  quantity: TypeNumeric1;
  /**
   * Identifier of the VestingTerms to which this security is subject. If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  /**
   * The cost basis for this particular stock
   */
  cost_basis: TypeMonetary1 | TypePreReleaseOmission;
  stock_legend_ids: StockIssuanceStockLegendIDArray;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * The price per share paid for the stock by the holder
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Transitional type; allows an otherwise "required" field to support omission by an implementation that can not yet support all fields. This is not intended to be permanent; rather it is a communication mechanism indicating that a field added in a pre-release version of the spec will need to be implemented to support the next release.
 */
export interface TypePreReleaseOmission {
  /**
   * Implementation-specific, optional message about missing data
   */
  comment?: string;
  /**
   * Positive indication of intentional omission
   */
  omitted: true;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing warrant issuance transaction by the issuer and held by a stakeholder
 */
export type ObjectWarrantIssuanceTransaction = ObjectWarrantIssuanceTransaction1 & ObjectWarrantIssuanceTransaction2;
export type ObjectWarrantIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityIssuanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Date of board approval for the security
 */
export type TypeDate1 = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];
/**
 * Quantity of shares the warrant is exercisable for
 */
export type TypeNumeric = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric1 = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Type representation of automatic trigger on a tive or condition.
 */
export type TypeAutomaticConversionOnConditionTrigger = TypeAutomaticConversionOnConditionTrigger1 &
  TypeAutomaticConversionOnConditionTrigger2;
export type TypeAutomaticConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric2 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric3 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric5 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of an automatic trigger on a date.
 */
export type TypeAutomaticConversionOnDateTrigger = TypeAutomaticConversionOnDateTrigger1 &
  TypeAutomaticConversionOnDateTrigger2;
export type TypeAutomaticConversionOnDateTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Date on which trigger occurs automatically (if it hasn't already occured)
 */
export type TypeDate2 = string;
/**
 * Type representation of elective trigger valid at will (so long as instrument is valid and outstanding).
 */
export type TypeElectiveConversionAtWill = TypeElectiveConversionAtWill1 & TypeElectiveConversionAtWill2;
export type TypeElectiveConversionAtWill1 = PrimitiveBaseConversionTriggerType;
/**
 * Type representation of elective trigger valid on or after start_date and until or before end_date.
 */
export type TypeElectiveConversionInDateRangeTrigger = TypeElectiveConversionInDateRangeTrigger1 &
  TypeElectiveConversionInDateRangeTrigger2;
export type TypeElectiveConversionInDateRangeTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Start date of range (inclusive)
 */
export type TypeDate3 = string;
/**
 * End date of range (inclusive)
 */
export type TypeDate4 = string;
/**
 * Type representation of elective trigger on fulfillment of a condition.
 */
export type TypeElectiveConversionOnConditionTrigger = TypeElectiveConversionOnConditionTrigger1 &
  TypeElectiveConversionOnConditionTrigger2;
export type TypeElectiveConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * Use this where no structured data is available regarding what triggers the conversion of a given security.
 */
export type TypeUnspecifiedConversionTrigger = TypeUnspecifiedConversionTrigger1 & TypeUnspecifiedConversionTrigger2;
export type TypeUnspecifiedConversionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * In event the Warrant can convert due to trigger events (e.g. Maturity, Next Qualified Financing, Change of Control, at Election of Holder), what are the terms?
 */
export type WarrantIssuanceExerciseTriggerArray = (
  | TypeAutomaticConversionOnConditionTrigger
  | TypeAutomaticConversionOnDateTrigger
  | TypeElectiveConversionAtWill
  | TypeElectiveConversionInDateRangeTrigger
  | TypeElectiveConversionOnConditionTrigger
  | TypeUnspecifiedConversionTrigger
)[];
/**
 * What is expiration date of the warrant (if applicable)
 */
export type TypeDate5 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate1;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}
export interface ObjectWarrantIssuanceTransaction2 {
  object_type?: "TX_WARRANT_ISSUANCE";
  quantity: TypeNumeric;
  exercise_price: TypeMonetary;
  purchase_price: TypeMonetary1;
  exercise_triggers: WarrantIssuanceExerciseTriggerArray;
  warrant_expiration_date?: TypeDate5;
  /**
   * Identifier of the VestingTerms to which this security is subject. If not present, security is fully vested on issuance.
   */
  vesting_terms_id?: string;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  custom_id?: unknown;
  stakeholder_id?: unknown;
  board_approval_date?: unknown;
  consideration_text?: unknown;
  security_law_exemptions?: unknown;
}
/**
 * The exercise price of the warrant
 */
export interface TypeMonetary {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
/**
 * Actual purchase price of the warrant (sum up purported value of all consideration, including in-kind)
 */
export interface TypeMonetary1 {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary2;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary2 {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric2;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary3;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary3 {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric3;
  denominator: TypeNumeric4;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric5;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric3;
  denominator: TypeNumeric4;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeAutomaticConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeAutomaticConversionOnDateTrigger2 {
  trigger_date: TypeDate2;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_DATE";
  conversion_right: unknown;
}
export interface TypeElectiveConversionAtWill2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_AT_WILL";
  conversion_right: unknown;
}
export interface TypeElectiveConversionInDateRangeTrigger2 {
  trigger_id: unknown;
  type: "ELECTIVE_IN_RANGE";
  start_date: TypeDate3;
  end_date: TypeDate4;
  nickname?: unknown;
  trigger_description?: unknown;
  conversion_right: unknown;
}
export interface TypeElectiveConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_ON_CONDITION";
  conversion_right: unknown;
}
export interface TypeUnspecifiedConversionTrigger2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "UNSPECIFIED";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a re-issuance of stock
 */
export type ObjectStockReIssuanceTransaction = ObjectStockReIssuanceTransaction1 & ObjectStockReIssuanceTransaction2;
export type ObjectStockReIssuanceTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityReissuanceTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Identifier of the new security (or securities) issuance resulting from a reissuance
 */
export type SecurityReissuanceResultingSecurityIDArray = string[];
/**
 * When stock is reissued as a result of a stock split, this field contains id of the respective stock class split transaction. It is not set otherwise.
 */
export type IdOfStockClassSplitTransaction = string;
/**
 * Free-form human-readable reason for stock reissuance
 */
export type ReasonForStockReissuance = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing common properties to a reissuance of a security
 */
export interface PrimitiveSecurityReissuanceTransaction {
  resulting_security_ids: SecurityReissuanceResultingSecurityIDArray;
  split_transaction_id?: IdOfStockClassSplitTransaction;
  reason_text?: ReasonForStockReissuance;
  [k: string]: unknown;
}
export interface ObjectStockReIssuanceTransaction2 {
  object_type?: "TX_STOCK_REISSUANCE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  resulting_security_ids?: unknown;
  split_transaction_id?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a plan security release transaction
 */
export type ObjectPlanSecurityReleaseTransaction = ObjectPlanSecurityReleaseTransaction1 &
  ObjectPlanSecurityReleaseTransaction2;
export type ObjectPlanSecurityReleaseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityReleaseTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Date of settlement
 */
export type TypeDate1 = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Net quantity of security units
 */
export type TypeNumeric1 = string;
/**
 * Quantity of security units sold
 */
export type TypeNumeric2 = string;
/**
 * Quantity of security units withheld
 */
export type TypeNumeric3 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing fields common to all release transaction objects
 */
export interface PrimitiveSecurityReleaseTransaction {
  settlement_date: TypeDate1;
  release_price: TypeMonetary;
  net_quantity?: TypeNumeric1;
  /**
   * Method of release
   */
  method?: string;
  /**
   * Whether this is a stock swap or not?
   */
  stock_swap?: boolean;
  cash_paid?: TypeMonetary1;
  quantity_sold?: TypeNumeric2;
  sale_price_per_unit?: TypeMonetary2;
  withheld_quantity?: TypeNumeric3;
  [k: string]: unknown;
}
/**
 * Consideration for the security
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Cash paid for the security
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Cash paid for the security
 */
export interface TypeMonetary2 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectPlanSecurityReleaseTransaction2 {
  object_type?: "TX_PLAN_SECURITY_RELEASE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  settlement_date?: unknown;
  release_price?: unknown;
  net_quantity?: unknown;
  method?: unknown;
  stock_swap?: unknown;
  cash_paid?: unknown;
  quantity_sold?: unknown;
  sale_price_per_unit?: unknown;
  withheld_quantity?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a stock repurchase transaction
 */
export type ObjectStockRepurchaseTransaction = ObjectStockRepurchaseTransaction1 & ObjectStockRepurchaseTransaction2;
export type ObjectStockRepurchaseTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRepurchaseTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Number of shares of stock repurchased
 */
export type TypeNumeric1 = string;
/**
 * For partial repurchases, list of security id(s) of the resulting stock objects holding any remaining shares
 */
export type SecurityRepurchaseResultingSecurityIDArray = string[];

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing common properties to a repurchase transaction
 */
export interface PrimitiveSecurityRepurchaseTransaction {
  price: TypeMonetary;
  quantity: TypeNumeric1;
  /**
   * Unstructured text description of consideration provided in exchange for security repurchase
   */
  consideration_text?: string;
  resulting_security_ids?: SecurityRepurchaseResultingSecurityIDArray;
  [k: string]: unknown;
}
/**
 * Repurchase price per share of the stock
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ObjectStockRepurchaseTransaction2 {
  object_type?: "TX_STOCK_REPURCHASE";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  price?: unknown;
  quantity?: unknown;
  consideration_text?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a retraction of a convertible security
 */
export type ObjectConvertibleRetractionTransaction = ObjectConvertibleRetractionTransaction1 &
  ObjectConvertibleRetractionTransaction2;
export type ObjectConvertibleRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectConvertibleRetractionTransaction2 {
  object_type?: "TX_CONVERTIBLE_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a retraction of a plan security
 */
export type ObjectPlanSecurityRetractionTransaction = ObjectPlanSecurityRetractionTransaction1 &
  ObjectPlanSecurityRetractionTransaction2;
export type ObjectPlanSecurityRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectPlanSecurityRetractionTransaction2 {
  object_type?: "TX_PLAN_SECURITY_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a retraction of a stock security
 */
export type ObjectStockRetractionTransaction = ObjectStockRetractionTransaction1 & ObjectStockRetractionTransaction2;
export type ObjectStockRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectStockRetractionTransaction2 {
  object_type?: "TX_STOCK_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a retraction of a warrant security
 */
export type ObjectWarrantRetractionTransaction = ObjectWarrantRetractionTransaction1 &
  ObjectWarrantRetractionTransaction2;
export type ObjectWarrantRetractionTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityRetractionTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}
export interface ObjectWarrantRetractionTransaction2 {
  object_type?: "TX_WARRANT_RETRACTION";
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  reason_text?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a split of a stock class
 */
export type ObjectStockSplitTransaction = ObjectStockSplitTransaction1 & ObjectStockSplitTransaction2;
export type ObjectStockSplitTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveStockClassTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that affect the stock class
 */
export interface PrimitiveStockClassTransaction {
  /**
   * Identifier of the StockClass object, a subject of this transaction
   */
  stock_class_id: string;
  [k: string]: unknown;
}
export interface ObjectStockSplitTransaction2 {
  object_type?: "TX_STOCK_CLASS_SPLIT";
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  stock_class_id?: unknown;
  split_ratio: TypeRatio;
}
/**
 * Ratio of new shares to old shares. For 2-for-1 split the numerator of the ratio is 2 and the denominator is 1.
 */
export interface TypeRatio {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a transfer or secondary sale of a convertible security
 */
export type ObjectConvertibleTransferTransaction = ObjectConvertibleTransferTransaction1 &
  ObjectConvertibleTransferTransaction2;
export type ObjectConvertibleTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectConvertibleTransferTransaction2 {
  object_type?: "TX_CONVERTIBLE_TRANSFER";
  amount: TypeMonetary;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}
/**
 * Amount of monetary value transferred
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a transfer of a plan security
 */
export type ObjectPlanSecurityTransferTransaction = ObjectPlanSecurityTransferTransaction1 &
  ObjectPlanSecurityTransferTransaction2;
export type ObjectPlanSecurityTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectPlanSecurityTransferTransaction2 {
  object_type?: "TX_PLAN_SECURITY_TRANSFER";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a transfer or secondary sale of a stock security
 */
export type ObjectStockTransferTransaction = ObjectStockTransferTransaction1 & ObjectStockTransferTransaction2;
export type ObjectStockTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectStockTransferTransaction2 {
  object_type?: "TX_STOCK_TRANSFER";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing a transfer or secondary sale of a warrant security
 */
export type ObjectWarrantTransferTransaction = ObjectWarrantTransferTransaction1 & ObjectWarrantTransferTransaction2;
export type ObjectWarrantTransferTransaction1 = PrimitiveBaseObject &
  PrimitiveTransaction &
  PrimitiveSecurityTransaction &
  PrimitiveSecurityTransferTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;
/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];
/**
 * Quantity of non-monetary security units transferred
 */
export type TypeNumeric = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}
export interface ObjectWarrantTransferTransaction2 {
  object_type?: "TX_WARRANT_TRANSFER";
  quantity: TypeNumeric;
  id?: unknown;
  comments?: unknown;
  security_id?: unknown;
  date?: unknown;
  consideration_text?: unknown;
  balance_security_id?: unknown;
  resulting_security_ids?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing the transaction of an non-schedule-driven vesting event associated with a security
 */
export type ObjectVestingEventTransaction = ObjectVestingEventTransaction1 & ObjectVestingEventTransaction2;
export type ObjectVestingEventTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveSecurityTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
export interface ObjectVestingEventTransaction2 {
  object_type?: "TX_VESTING_EVENT";
  /**
   * Reference to the `id` of a VestingCondition in this security's VestingTerms. This condition should have a trigger type of `VESTING_EVENT`.
   */
  vesting_condition_id: string;
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  security_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object describing the transaction of vesting schedule start / commencement associated with a security
 */
export type ObjectVestingStartTransaction = ObjectVestingStartTransaction1 & ObjectVestingStartTransaction2;
export type ObjectVestingStartTransaction1 = PrimitiveBaseObject & PrimitiveTransaction & PrimitiveSecurityTransaction;
/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";
/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}
/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}
export interface ObjectVestingStartTransaction2 {
  object_type?: "TX_VESTING_START";
  /**
   * Reference to the `id` of a VestingCondition in this security's VestingTerms. This condition should have a trigger type of `VESTING_START_DATE`.
   */
  vesting_condition_id: string;
  id?: unknown;
  comments?: unknown;
  date?: unknown;
  security_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * File type field (used to select proper schema for validation)
 */
export type EnumOCFFileType =
  | "OCF_MANIFEST_FILE"
  | "OCF_STAKEHOLDERS_FILE"
  | "OCF_STOCK_CLASSES_FILE"
  | "OCF_STOCK_LEGEND_TEMPLATES_FILE"
  | "OCF_STOCK_PLANS_FILE"
  | "OCF_TRANSACTIONS_FILE"
  | "OCF_VALUATIONS_FILE"
  | "OCF_VESTING_TERMS_FILE";

/**
 * Abstract file to be extended by all other files
 */
export interface ObjectBaseFile {
  file_type: EnumOCFFileType;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Object type field
 */
export type EnumObjectType =
  | "ISSUER"
  | "STAKEHOLDER"
  | "STOCK_CLASS"
  | "STOCK_LEGEND_TEMPLATE"
  | "STOCK_PLAN"
  | "VALUATION"
  | "VESTING_TERMS"
  | "TX_STOCK_CLASS_SPLIT"
  | "TX_CONVERTIBLE_ACCEPTANCE"
  | "TX_CONVERTIBLE_CANCELLATION"
  | "TX_CONVERTIBLE_CONVERSION"
  | "TX_CONVERTIBLE_ISSUANCE"
  | "TX_CONVERTIBLE_RETRACTION"
  | "TX_CONVERTIBLE_TRANSFER"
  | "TX_PLAN_SECURITY_ACCEPTANCE"
  | "TX_PLAN_SECURITY_CANCELLATION"
  | "TX_PLAN_SECURITY_EXERCISE"
  | "TX_PLAN_SECURITY_ISSUANCE"
  | "TX_PLAN_SECURITY_RELEASE"
  | "TX_PLAN_SECURITY_RETRACTION"
  | "TX_PLAN_SECURITY_TRANSFER"
  | "TX_STOCK_ACCEPTANCE"
  | "TX_STOCK_CANCELLATION"
  | "TX_STOCK_CONVERSION"
  | "TX_STOCK_ISSUANCE"
  | "TX_STOCK_REISSUANCE"
  | "TX_STOCK_REPURCHASE"
  | "TX_STOCK_RETRACTION"
  | "TX_STOCK_TRANSFER"
  | "TX_WARRANT_ACCEPTANCE"
  | "TX_WARRANT_CANCELLATION"
  | "TX_WARRANT_EXERCISE"
  | "TX_WARRANT_ISSUANCE"
  | "TX_WARRANT_RETRACTION"
  | "TX_WARRANT_TRANSFER"
  | "TX_VESTING_START"
  | "TX_VESTING_EVENT";

/**
 * Abstract object to be extended by all other objects
 */
export interface PrimitiveBaseObject {
  /**
   * Identifier for the object
   */
  id: string;
  /**
   * Unstructured text comments related to and stored for the object
   */
  comments?: string[];
  object_type: EnumObjectType;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Abstract transaction object to be extended by all transaction objects that deal with individual securities
 */
export interface PrimitiveSecurityTransaction {
  /**
   * Identifier for the security (stock, plan security, warrant, or convertible) by which it can be referenced by other transaction objects. Note that while this identifier is created with an issuance object, it should be different than the issuance object's `id` field which identifies the issuance transaction object itself. All future transactions on the security (e.g. acceptance, transfer, cancel, etc.) must reference this `security_id` to qualify which security the transaction applies to.
   */
  security_id: string;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Abstract transaction object to be extended by all transaction objects that affect the stock class
 */
export interface PrimitiveStockClassTransaction {
  /**
   * Identifier of the StockClass object, a subject of this transaction
   */
  stock_class_id: string;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Date on which the transaction occurred
 */
export type TypeDate = string;

/**
 * Abstract transaction object to be extended by all other transaction objects
 */
export interface PrimitiveTransaction {
  date: TypeDate;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Abstract object describing a security acceptance transaction
 */
export interface PrimitiveSecurityAcceptanceTransaction {
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Abstract object describing fields common to all cancellation transaction objects
 */
export interface PrimitiveSecurityCancellationTransaction {
  /**
   * Identifier for the security that holds the remainder balance (for partial cancellations)
   */
  balance_security_id?: string;
  /**
   * Reason for the cancellation
   */
  reason_text: string;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifier for the security (or securities) that resulted from the conversion
 */
export type SecurityConversionResultingSecurityIDArray = string[];

/**
 * Abstract object describing fields common to all conversion transaction objects
 */
export interface PrimitiveSecurityConversionTransaction {
  resulting_security_ids: SecurityConversionResultingSecurityIDArray;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifier for the security (or securities) that resulted from the exercise
 */
export type SecurityExerciseResultingSecurityIDArray = string[];

/**
 * Abstract object describing fields common to all exercise transaction objects
 */
export interface PrimitiveSecurityExerciseTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security exercise
   */
  consideration_text?: string;
  resulting_security_ids: SecurityExerciseResultingSecurityIDArray;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Date of board approval for the security
 */
export type TypeDate = string;
/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;
/**
 * List of security law exemptions (and applicable jurisdictions) for this security
 */
export type SecurityIssuanceSecurityExemptionArray = TypeSecurityExemption[];

/**
 * Abstract object describing fields common to all issuance objects
 */
export interface PrimitiveSecurityIssuanceTransaction {
  /**
   * A custom ID for this security (e.g. CN-1.)
   */
  custom_id: string;
  /**
   * Identifier for the stakeholder that holds legal title to this security
   */
  stakeholder_id: string;
  board_approval_date?: TypeDate;
  /**
   * Unstructured text description of consideration provided in exchange for security issuance
   */
  consideration_text?: string;
  security_law_exemptions: SecurityIssuanceSecurityExemptionArray;
  [k: string]: unknown;
}
/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifier of the new security (or securities) issuance resulting from a reissuance
 */
export type SecurityReissuanceResultingSecurityIDArray = string[];
/**
 * When stock is reissued as a result of a stock split, this field contains id of the respective stock class split transaction. It is not set otherwise.
 */
export type IdOfStockClassSplitTransaction = string;
/**
 * Free-form human-readable reason for stock reissuance
 */
export type ReasonForStockReissuance = string;

/**
 * Abstract object describing common properties to a reissuance of a security
 */
export interface PrimitiveSecurityReissuanceTransaction {
  resulting_security_ids: SecurityReissuanceResultingSecurityIDArray;
  split_transaction_id?: IdOfStockClassSplitTransaction;
  reason_text?: ReasonForStockReissuance;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Date of settlement
 */
export type TypeDate = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Net quantity of security units
 */
export type TypeNumeric1 = string;
/**
 * Quantity of security units sold
 */
export type TypeNumeric2 = string;
/**
 * Quantity of security units withheld
 */
export type TypeNumeric3 = string;

/**
 * Abstract object describing fields common to all release transaction objects
 */
export interface PrimitiveSecurityReleaseTransaction {
  settlement_date: TypeDate;
  release_price: TypeMonetary;
  net_quantity?: TypeNumeric1;
  /**
   * Method of release
   */
  method?: string;
  /**
   * Whether this is a stock swap or not?
   */
  stock_swap?: boolean;
  cash_paid?: TypeMonetary1;
  quantity_sold?: TypeNumeric2;
  sale_price_per_unit?: TypeMonetary2;
  withheld_quantity?: TypeNumeric3;
  [k: string]: unknown;
}
/**
 * Consideration for the security
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Cash paid for the security
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * Cash paid for the security
 */
export interface TypeMonetary2 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Number of shares of stock repurchased
 */
export type TypeNumeric1 = string;
/**
 * For partial repurchases, list of security id(s) of the resulting stock objects holding any remaining shares
 */
export type SecurityRepurchaseResultingSecurityIDArray = string[];

/**
 * Abstract object describing common properties to a repurchase transaction
 */
export interface PrimitiveSecurityRepurchaseTransaction {
  price: TypeMonetary;
  quantity: TypeNumeric1;
  /**
   * Unstructured text description of consideration provided in exchange for security repurchase
   */
  consideration_text?: string;
  resulting_security_ids?: SecurityRepurchaseResultingSecurityIDArray;
  [k: string]: unknown;
}
/**
 * Repurchase price per share of the stock
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Abstract object describing a security retraction transaction
 */
export interface PrimitiveSecurityRetractionTransaction {
  /**
   * Reason for the retraction
   */
  reason_text: string;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Array of identifiers for new security (or securities) created as a result of the transaction
 *
 * @minItems 1
 */
export type SecurityTransferResultingSecurityIDArray = [string, ...string[]];

/**
 * Abstract object describing a security transfer or secondary sale transaction
 */
export interface PrimitiveSecurityTransferTransaction {
  /**
   * Unstructured text description of consideration provided in exchange for security transfer
   */
  consideration_text?: string;
  /**
   * Identifier for the security that holds the remainder balance (for partial transfers)
   */
  balance_security_id?: string;
  resulting_security_ids: SecurityTransferResultingSecurityIDArray;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";

/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";

/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * What type of address is this (e.g. legal address, contact address, etc.)
 */
export type EnumAddressType = "LEGAL" | "CONTACT" | "OTHER";
/**
 * State, province, or equivalent identifier required for an address in this country
 */
export type TypeCountrySubdivisionCode = string;
/**
 * Country code for this address (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;

/**
 * Type representation of an address
 */
export interface TypeAddress {
  address_type: EnumAddressType;
  /**
   * Street address (multi-line string)
   */
  street_suite?: string;
  /**
   * City
   */
  city?: string;
  country_subdivision?: TypeCountrySubdivisionCode;
  country: TypeCountryCode;
  /**
   * Address postal code
   */
  postal_code?: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type represents a group of securities that constitutes some formally defined part of the company (e.g. post-money capitalization vs pre-money for a security)
 */
export interface TypeCapitalizationDefinition {
  /**
   * All issuances of stock classes with these ids should be included (unless such an issuance is specifically included in `exclude_security_ids`
   */
  include_stock_class_ids: string[];
  /**
   * All issuances of plan securities from stock plans with these ids should be included (unless such an issuance is specifically excluded in `exclude_security_ids`
   */
  include_stock_plans_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be included from this definition of capitalization (overrides plan or class-level rules)
   */
  include_security_ids: string[];
  /**
   * Securities (whether Stock, Plan Securities, Convertibles or Warrants) with these security ids should be excluded from this definition of capitalization (overrides plan or class-level rules)
   */
  exclude_security_ids: string[];
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";
/**
 * Phone numbers to reach the contact at
 */
export type ContactInfoPhoneNumberArray = TypePhone[];
/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";
/**
 * Emails to reach the contact at
 */
export type ContactInfoEmailAddressArray = TypeEmail[];

/**
 * Type representation of a primary contact person for a stakeholder (e.g. a fund)
 */
export interface TypeContactInfo {
  name: TypeName;
  phone_numbers: ContactInfoPhoneNumberArray;
  emails: ContactInfoEmailAddressArray;
}
/**
 * Contact's name
 */
export interface TypeName {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}
/**
 * Type representation of a phone number
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}
/**
 * Type representation of an email address
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of an ISO 3166-1 alpha 2 country code
 */
export type TypeCountryCode = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of the second part of an ISO 3166-2 country subdivision code
 */
export type TypeCountrySubdivisionCode = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of an ISO 4217 currency code
 */
export type TypeCurrencyCode = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type represention of an ISO-8601 date, e.g. 2022-01-28
 */
export type TypeDate = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type of e-mail address (e.g. personal or business)
 */
export type EnumEmailType = "PERSONAL" | "BUSINESS" | "OTHER";

/**
 * Type representation of an email address
 */
export interface TypeEmail {
  email_type: EnumEmailType;
  /**
   * A valid e-mail address
   */
  email_address: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * MD5 file checksum
 */
export type TypeMD5Hash = string;

/**
 * Type representation of a file
 */
export interface TypeFile {
  /**
   * Path to the file within the OCF container
   */
  filepath: string;
  md5: TypeMD5Hash;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * String representation of MD5 hash with basic validation for a string of 32 characters composed of letters (uppercase or lowercase) and numbers
 */
export type TypeMD5Hash = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;

/**
 * Type representation of an amount of money in a specified currency
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type comprising of multiple name components
 */
export interface TypeName {
  /**
   * Legal full name for the individual/institution
   */
  legal_name: string;
  /**
   * First/given name for the individual
   */
  first_name?: string;
  /**
   * Last/family name for the individual
   */
  last_name?: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Fixed-point string representation of a number (up to 10 decimal places supported)
 */
export type TypeNumeric = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Fixed-point string representation of a percentage as a decimal between 0.0 and 1.0 (up to 10 decimal places supported)
 */
export type TypePercentage = string;

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type of phone number (e.g. mobile, home or business)
 */
export type EnumPhoneType = "HOME" | "MOBILE" | "BUSINESS" | "OTHER";

/**
 * Type representation of a phone number
 */
export interface TypePhone {
  phone_type: EnumPhoneType;
  /**
   * A valid phone number string in ITU E.123 international notation (e.g. +123 123 456 7890)
   */
  phone_number: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Transitional type; allows an otherwise "required" field to support omission by an implementation that can not yet support all fields. This is not intended to be permanent; rather it is a communication mechanism indicating that a field added in a pre-release version of the spec will need to be implemented to support the next release.
 */
export interface TypePreReleaseOmission {
  /**
   * Implementation-specific, optional message about missing data
   */
  comment?: string;
  /**
   * Positive indication of intentional omission
   */
  omitted: true;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;

/**
 * Type representation of a ratio as two parts of a quotient, i.e. numerator and denominator numeric values
 */
export interface TypeRatio {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Country code of the jurisdiction of the applicable law (ISO 3166-1 alpha-2)
 */
export type TypeCountryCode = string;

/**
 * Type representation of a securities issuance exemption that includes an unstructured description and a country code for ease of processing and analysis
 */
export interface TypeSecurityExemption {
  /**
   * Description of an applicable security law exemption governing the issuance
   */
  description: string;
  jurisdiction: TypeCountryCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Parent object type for this stock issuance (e.g. a stock plan or warrant)
 */
export type EnumParentSecurityType = "STOCK_PLAN" | "STOCK" | "WARRANT" | "CONVERTIBLE";

/**
 * Type representation of the parent security of a given stock issuance (e.g. if a stock issuance came from a plan, such as an RSA, or if a stock came from a previous stock entry)
 */
export interface TypeStockParent {
  parent_object_type: EnumParentSecurityType;
  /**
   * Parent object's ID must be a valid ID pointing to an object of the type specified in parent_object_type
   */
  parent_object_id: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Issuing country code (ISO 3166-1 alpha-2) for the tax identifier
 */
export type TypeCountryCode = string;

/**
 * Type representation of a government identifier for tax purposes (e.g. EIN) and corresponding country code (ISO-3166)
 */
export interface TypeTaxIdentifier {
  /**
   * Tax identifier as string
   */
  tax_id: string;
  country: TypeCountryCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * What cause of termination is this window for?
 */
export type EnumTerminationWindowType =
  | "VOLUNTARY_OTHER"
  | "VOLUNTARY_GOOD_CAUSE"
  | "VOLUNTARY_RETIREMENT"
  | "INVOLUNTARY_OTHER"
  | "INVOLUNTARY_DEATH"
  | "INVOLUNTARY_DISABILITY"
  | "INVOLUNTARY_WITH_CAUSE";
/**
 * The type of period being measured (e.g. days or month)
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";

/**
 * Type representation of a termination window
 */
export interface TypeTerminationWindow {
  reason: EnumTerminationWindowType;
  /**
   * The length of the period in this termination window (in number of periods of type period_type)
   */
  period: number;
  period_type: EnumPeriodType;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric = string;

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric1 = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric1;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage = string;

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;

/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";

/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of automatic trigger on a tive or condition.
 */
export type TypeAutomaticConversionOnConditionTrigger = TypeAutomaticConversionOnConditionTrigger1 &
  TypeAutomaticConversionOnConditionTrigger2;
export type TypeAutomaticConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeAutomaticConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_CONDITION";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of an automatic trigger on a date.
 */
export type TypeAutomaticConversionOnDateTrigger = TypeAutomaticConversionOnDateTrigger1 &
  TypeAutomaticConversionOnDateTrigger2;
export type TypeAutomaticConversionOnDateTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Date on which trigger occurs automatically (if it hasn't already occured)
 */
export type TypeDate = string;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeAutomaticConversionOnDateTrigger2 {
  trigger_date: TypeDate;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "AUTOMATIC_ON_DATE";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of elective trigger valid at will (so long as instrument is valid and outstanding).
 */
export type TypeElectiveConversionAtWill = TypeElectiveConversionAtWill1 & TypeElectiveConversionAtWill2;
export type TypeElectiveConversionAtWill1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeElectiveConversionAtWill2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_AT_WILL";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of elective trigger valid on or after start_date and until or before end_date.
 */
export type TypeElectiveConversionInDateRangeTrigger = TypeElectiveConversionInDateRangeTrigger1 &
  TypeElectiveConversionInDateRangeTrigger2;
export type TypeElectiveConversionInDateRangeTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Start date of range (inclusive)
 */
export type TypeDate = string;
/**
 * End date of range (inclusive)
 */
export type TypeDate1 = string;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeElectiveConversionInDateRangeTrigger2 {
  trigger_id: unknown;
  type: "ELECTIVE_IN_RANGE";
  start_date: TypeDate;
  end_date: TypeDate1;
  nickname?: unknown;
  trigger_description?: unknown;
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Type representation of elective trigger on fulfillment of a condition.
 */
export type TypeElectiveConversionOnConditionTrigger = TypeElectiveConversionOnConditionTrigger1 &
  TypeElectiveConversionOnConditionTrigger2;
export type TypeElectiveConversionOnConditionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeElectiveConversionOnConditionTrigger2 {
  /**
   * Legal language describing what conditions must be satisfied for the conversion to take place (ideally, this should be excerpted from the instrument where possible)
   */
  trigger_condition: string;
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "ELECTIVE_ON_CONDITION";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Use this where no structured data is available regarding what triggers the conversion of a given security.
 */
export type TypeUnspecifiedConversionTrigger = TypeUnspecifiedConversionTrigger1 & TypeUnspecifiedConversionTrigger2;
export type TypeUnspecifiedConversionTrigger1 = PrimitiveBaseConversionTriggerType;
/**
 * When the trigger condition is met, is the conversion automatic, elective or automatic with an elective right not to convert
 */
export type EnumTriggerType =
  | "AUTOMATIC_ON_CONDITION"
  | "AUTOMATIC_ON_DATE"
  | "ELECTIVE_IN_RANGE"
  | "ELECTIVE_ON_CONDITION"
  | "ELECTIVE_AT_WILL"
  | "UNSPECIFIED";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeConvertibleConversionRights = TypeConvertibleConversionRights1 & TypeConvertibleConversionRights2;
export type TypeConvertibleConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * What kind of conversion right is this?
 */
export type EnumConversionRightType =
  | "CONVERTIBLE_CONVERSION_RIGHT"
  | "WARRANT_CONVERSION_RIGHT"
  | "STOCK_CLASS_CONVERSION_RIGHT";
/**
 * Sets forth inputs and conversion mechanism of a SAFE (mirrors the flavors and inputs of the Y Combinator SAFE)
 */
export type ConversionMechanismSAFE = ConversionMechanismSAFE1 & ConversionMechanismSAFE2;
export type ConversionMechanismSAFE1 = PrimitiveBaseConversionMechanismType;
/**
 * Identifies the specific conversion trigger type
 */
export type EnumConversionMechanismType =
  | "FIXED_AMOUNT_CONVERSION"
  | "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION"
  | "RATIO_CONVERSION"
  | "SAFE_CONVERSION"
  | "CONVERTIBLE_NOTE_CONVERSION"
  | "CUSTOM_CONVERSION";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage = string;
/**
 * Numeric amount of money
 */
export type TypeNumeric = string;
/**
 * ISO 4217 currency code
 */
export type TypeCurrencyCode = string;
/**
 * Sets forth inputs and conversion mechanism of a convertible note
 */
export type ConversionMechanismNote = ConversionMechanismNote1 & ConversionMechanismNote2;
export type ConversionMechanismNote1 = PrimitiveBaseConversionMechanismType;
/**
 * Interest rate of the convertible (if applicable)
 */
export type TypeNumeric1 = string;
/**
 * How many days are there is a given period for calculation purposes?
 */
export type EnumDayCountType = "ACTUAL_365" | "30_360";
/**
 * How is interest paid out (if at applicable)
 */
export type EnumInterestPayoutType = "DEFERRED" | "CASH";
/**
 * What is the period over which interest is calculated?
 */
export type EnumAccrualPeriodType = "DAILY" | "MONTHLY" | "QUARTERLY" | "SEMI_ANNUAL" | "ANNUAL";
/**
 * What type of interest compounding?
 */
export type EnumCompoundingType = "COMPOUNDING" | "SIMPLE";
/**
 * What is the percentage discount available upon conversion, if applicable? (decimal representation - e.g. 0.125 for 12.5%)
 */
export type TypePercentage1 = string;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric2 = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric3 = string;
/**
 * Sets forth inputs and conversion mechanism of a custom conversion, a conversion type that cannot be accurately modelled with any other OCF conversion mechanism type
 */
export type ConversionMechanismCustom = ConversionMechanismCustom1 & ConversionMechanismCustom2;
export type ConversionMechanismCustom1 = PrimitiveBaseConversionMechanismType;
/**
 * Sets forth inputs and conversion mechanism of percent of capitalization conversion (where an instrument purports to grant a percent of company capitalization at some point in time)
 */
export type ConversionMechanismPercentOfCapitalization = ConversionMechanismPercentOfCapitalization1 &
  ConversionMechanismPercentOfCapitalization2;
export type ConversionMechanismPercentOfCapitalization1 = PrimitiveBaseConversionMechanismType;
/**
 * What percentage of the company capitalization does this convert to
 */
export type TypePercentage2 = string;
/**
 * Describes how a security converts into a fixed amount of a stock class
 */
export type ConversionMechanismFixedAmount = ConversionMechanismFixedAmount1 & ConversionMechanismFixedAmount2;
export type ConversionMechanismFixedAmount1 = PrimitiveBaseConversionMechanismType;
/**
 * How many shares of target Stock Class does this security convert into?
 */
export type TypeNumeric4 = string;
/**
 * Sets forth inputs and conversion mechanism of a ratio conversion (primarily used to describe conversion from one stock class (e.g. Preferred) into another (e.g. Common)
 */
export type ConversionMechanismRatio = ConversionMechanismRatio1 & ConversionMechanismRatio2;
export type ConversionMechanismRatio1 = PrimitiveBaseConversionMechanismType;
/**
 * How should fractional shares be rounded?
 */
export type EnumRoundingType = "CEILING" | "FLOOR" | "NORMAL";
/**
 * Type representation of a conversion right from a convertible into another non-plan security
 */
export type TypeWarrantConversionRights = TypeWarrantConversionRights1 & TypeWarrantConversionRights2;
export type TypeWarrantConversionRights1 = PrimitiveBaseConversionRightType;
/**
 * Type representation of a conversion right from one Stock Class into another Stock Class
 */
export type TypeStockClassConversionRights = TypeStockClassConversionRights1 & TypeStockClassConversionRights2;
export type TypeStockClassConversionRights1 = PrimitiveBaseConversionRightType;

/**
 * Abstract type representation of required fields require for conversion rights types.
 */
export interface PrimitiveBaseConversionTriggerType {
  type: EnumTriggerType;
  /**
   * Id for this conversion trigger, unique within list of ConversionTriggers in parent convertible issuance's `conversion_triggers` field.
   */
  trigger_id: string;
  /**
   * Human-friendly nickname to describe the conversion right
   */
  nickname?: string;
  /**
   * Long-form description of the trigger
   */
  trigger_description?: string;
  /**
   * When the conditions of the trigger are met, how does the convertible convert?
   */
  conversion_right: TypeConvertibleConversionRights | TypeWarrantConversionRights | TypeStockClassConversionRights;
  [k: string]: unknown;
}
/**
 * Abstract type representation of a conversion right from a non-plan security into another non-plan security
 */
export interface PrimitiveBaseConversionRightType {
  type?: EnumConversionRightType;
  /**
   * What conversion mechanism applies to calculate the number of resulting securities?
   */
  conversion_mechanism:
    | ConversionMechanismSAFE
    | ConversionMechanismNote
    | ConversionMechanismCustom
    | ConversionMechanismPercentOfCapitalization
    | ConversionMechanismFixedAmount
    | ConversionMechanismRatio;
  /**
   * Is this stock class potentially convertible into a future, as-yet undetermined stock class (e.g. Founder Preferred)
   */
  converts_to_future_round?: boolean;
  /**
   * The identifier of the existing, known stock class this stock class can convert into
   */
  converts_to_stock_class_id?: string;
  [k: string]: unknown;
}
/**
 * Abstract type setting forth required field(s) for ALL conversion mechanism types
 */
export interface PrimitiveBaseConversionMechanismType {
  type: EnumConversionMechanismType;
  [k: string]: unknown;
}
export interface ConversionMechanismSAFE2 {
  type: "SAFE_CONVERSION";
  conversion_discount?: TypePercentage;
  conversion_valuation_cap?: TypeMonetary;
  /**
   * Is this an MFN flavored SAFE?
   */
  conversion_mfn?: boolean;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
export interface ConversionMechanismNote2 {
  type: "CONVERTIBLE_NOTE_CONVERSION";
  interest_rate: TypeNumeric1;
  day_count_convention: EnumDayCountType;
  interest_payout: EnumInterestPayoutType;
  interest_accrual_period: EnumAccrualPeriodType;
  compounding_type: EnumCompoundingType;
  conversion_discount?: TypePercentage1;
  conversion_valuation_cap?: TypeMonetary1;
  exit_multiple?: TypeRatio;
}
/**
 * What is the valuation cap (if applicable)?
 */
export interface TypeMonetary1 {
  amount: TypeNumeric;
  currency: TypeCurrencyCode;
}
/**
 * For cash proceeds calculation during a liquidity event.
 */
export interface TypeRatio {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface ConversionMechanismCustom2 {
  type: "CUSTOM_CONVERSION";
  /**
   * Detailed description of how the number of resulting shares should be determined? Use legal language from an instrument where possible
   */
  custom_conversion_description: string;
}
export interface ConversionMechanismPercentOfCapitalization2 {
  type: "FIXED_PERCENT_OF_CAPITALIZATION_CONVERSION";
  converts_to_percent: TypePercentage2;
  /**
   * How is company capitalization defined for purposes of conversion? If possible, include the legal language from the instrument.
   */
  capitalization_definition?: string;
}
export interface ConversionMechanismFixedAmount2 {
  type: "FIXED_AMOUNT_CONVERSION";
  converts_to_quantity: TypeNumeric4;
}
export interface ConversionMechanismRatio2 {
  type: "RATIO_CONVERSION";
  ratio: TypeRatio1;
  rounding_type: EnumRoundingType;
}
/**
 * One share of this stock class converts into this many target stock class shares
 */
export interface TypeRatio1 {
  numerator: TypeNumeric2;
  denominator: TypeNumeric3;
}
export interface TypeConvertibleConversionRights2 {
  type?: "CONVERTIBLE_CONVERSION_RIGHT";
  conversion_mechanism:
    | ConversionMechanismSAFE1
    | ConversionMechanismNote1
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeWarrantConversionRights2 {
  type?: "WARRANT_CONVERSION_RIGHT";
  /**
   * What conversion mechanism applies to calculate the number of resulting stock class shares?
   */
  conversion_mechanism:
    | ConversionMechanismCustom1
    | ConversionMechanismPercentOfCapitalization1
    | ConversionMechanismFixedAmount1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeStockClassConversionRights2 {
  type?: "STOCK_CLASS_CONVERSION_RIGHT";
  conversion_mechanism: ConversionMechanismRatio1;
  converts_to_future_round?: unknown;
  converts_to_stock_class_id?: unknown;
}
export interface TypeUnspecifiedConversionTrigger2 {
  trigger_id: unknown;
  nickname?: unknown;
  trigger_description?: unknown;
  type: "UNSPECIFIED";
  conversion_right: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes condition / triggers to be satisfied for vesting to occur
 */
export type TypeVestingCondition = TypeVestingCondition1 & TypeVestingCondition2;
/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;
/**
 * If specified, the fixed amount of the whole security to vest, e.g. 10000 shares. Use `portion` for a proportional vesting amount.
 */
export type TypeNumeric2 = string;
/**
 * Describes a vesting condition satisfied at the security's vesting commencement date
 */
export type TypeVestingStartTrigger = TypeVestingStartTrigger1 & TypeVestingStartTrigger2;
export type TypeVestingStartTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";
/**
 * Describes a vesting condition satisfied on an absolute date.
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * The date on which this condition triggers.
 */
export type TypeDate = string;
/**
 * Describes a vesting condition satisfied when a period of time, relative to another vesting condition, has elapsed.
 */
export type TypeVestingEventTrigger3 = TypeVestingEventTrigger4 & TypeVestingEventTrigger5;
export type TypeVestingEventTrigger4 = PrimitiveVestingConditionTriggerType;
/**
 * Describes a period of time expressed in days (e.g. 365 days) for use in Vesting Terms
 */
export type TypeVestingPeriodInDays = TypeVestingPeriodInDays1 & TypeVestingPeriodInDays2;
export type TypeVestingPeriodInDays1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Describes a period of time expressed in months (e.g. 3 months) for use in Vesting Terms.
 */
export type TypeVestingPeriodInMonths = TypeVestingPeriodInMonths1 & TypeVestingPeriodInMonths2;
export type TypeVestingPeriodInMonths1 = PrimitiveVestingPeriodType;
/**
 * The calendar day of a month to award vesting.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";
/**
 * Describes a vesting condition satisfied when a particular unscheduled event occurs
 */
export type TypeVestingEventTrigger6 = TypeVestingEventTrigger7 & TypeVestingEventTrigger8;
export type TypeVestingEventTrigger7 = PrimitiveVestingConditionTriggerType;
export type TypeVestingCondition2 = {
  [k: string]: unknown;
};

export interface TypeVestingCondition1 {
  /**
   * Reference identifier for this condition
   */
  id: string;
  /**
   * Detailed description of the condition
   */
  description?: string;
  portion?: TypeVestingConditionPortion;
  quantity?: TypeNumeric2;
  /**
   * Describes how this vesting condition is met, resulting in vesting the specified tranche of shares
   */
  trigger: TypeVestingStartTrigger | TypeVestingEventTrigger | TypeVestingEventTrigger3 | TypeVestingEventTrigger6;
  /**
   * List of ALL VestingCondition IDs that can trigger after this one. If there are none, use an empty array.
   * Conditions should be in priority order in the array, ordered from the highest priority to the lowest.
   */
  next_condition_ids: string[];
}
/**
 * If specified, the fractional part of the whole security that is vested, e.g. 25:100 for 25%. Use `quantity` for a fixed vesting amount.
 */
export interface TypeVestingConditionPortion {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
  /**
   * If false, the ratio is applied to the entire quantity of the security's issuance. If true, it is applied to the amount that has yet to vest. For example:
   *  A stakeholder has been granted 1000 shares, and 400 are already vested.
   * If the portion is 1/5 and `remainder` is `false` for a VestingCondition, then that condition will vest 200 shares -- 1/5 of the 1000 granted.
   * If the portion is 1/5 and `remainder` is `true`, then that condition will vest 120 shares -- 1/5 of the 600 unvested.
   */
  remainder?: boolean;
}
/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingStartTrigger2 {
  type?: "VESTING_START_DATE";
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_SCHEDULE_ABSOLUTE";
  date: TypeDate;
}
export interface TypeVestingEventTrigger5 {
  type?: "VESTING_SCHEDULE_RELATIVE";
  /**
   * The span of time that must have elapsed since the condition `relative_to_condition_id` occurred for this condition to trigger. For weeks or "ideal" years (365 days), use `VestingPeriodInDays`. For calendar years use `VestingPeriodInMonths`.
   */
  period: TypeVestingPeriodInDays | TypeVestingPeriodInMonths;
  /**
   * Reference to the vesting condition ID to which the `period` is relative
   */
  relative_to_condition_id: string;
}
/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInDays2 {
  length?: unknown;
  type?: "DAYS";
  occurrences?: unknown;
}
export interface TypeVestingPeriodInMonths2 {
  length?: unknown;
  type?: "MONTHS";
  occurrences?: unknown;
  day_of_month: EnumVestingDayOfMonth;
}
export interface TypeVestingEventTrigger8 {
  type?: "VESTING_EVENT";
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Numerator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where A is the numerator
 */
export type TypeNumeric = string;
/**
 * Denominator of the ratio, i.e. the ratio of A to B (A:B) can be expressed as a fraction (A/B), where B is the denominator
 */
export type TypeNumeric1 = string;

/**
 * Describes a fractional portion (ratio) of shares associated with a Vesting Condition
 */
export interface TypeVestingConditionPortion {
  numerator: TypeNumeric;
  denominator: TypeNumeric1;
  /**
   * If false, the ratio is applied to the entire quantity of the security's issuance. If true, it is applied to the amount that has yet to vest. For example:
   *  A stakeholder has been granted 1000 shares, and 400 are already vested.
   * If the portion is 1/5 and `remainder` is `false` for a VestingCondition, then that condition will vest 200 shares -- 1/5 of the 1000 granted.
   * If the portion is 1/5 and `remainder` is `true`, then that condition will vest 120 shares -- 1/5 of the 600 unvested.
   */
  remainder?: boolean;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a vesting condition satisfied when a particular unscheduled event occurs
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";

/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_EVENT";
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a period of time expressed in days (e.g. 365 days) for use in Vesting Terms
 */
export type TypeVestingPeriodInDays = TypeVestingPeriodInDays1 & TypeVestingPeriodInDays2;
export type TypeVestingPeriodInDays1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";

/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInDays2 {
  length?: unknown;
  type?: "DAYS";
  occurrences?: unknown;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a period of time expressed in months (e.g. 3 months) for use in Vesting Terms.
 */
export type TypeVestingPeriodInMonths = TypeVestingPeriodInMonths1 & TypeVestingPeriodInMonths2;
export type TypeVestingPeriodInMonths1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * The calendar day of a month to award vesting.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";

/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInMonths2 {
  length?: unknown;
  type?: "MONTHS";
  occurrences?: unknown;
  day_of_month: EnumVestingDayOfMonth;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a vesting condition satisfied on an absolute date.
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";
/**
 * The date on which this condition triggers.
 */
export type TypeDate = string;

/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_SCHEDULE_ABSOLUTE";
  date: TypeDate;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a vesting condition satisfied when a period of time, relative to another vesting condition, has elapsed.
 */
export type TypeVestingEventTrigger = TypeVestingEventTrigger1 & TypeVestingEventTrigger2;
export type TypeVestingEventTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";
/**
 * Describes a period of time expressed in days (e.g. 365 days) for use in Vesting Terms
 */
export type TypeVestingPeriodInDays = TypeVestingPeriodInDays1 & TypeVestingPeriodInDays2;
export type TypeVestingPeriodInDays1 = PrimitiveVestingPeriodType;
/**
 * The unit of time for the period, e.g. `MONTHS` or `DAYS`
 */
export type EnumPeriodType = "DAYS" | "MONTHS" | "YEARS";
/**
 * Describes a period of time expressed in months (e.g. 3 months) for use in Vesting Terms.
 */
export type TypeVestingPeriodInMonths = TypeVestingPeriodInMonths1 & TypeVestingPeriodInMonths2;
export type TypeVestingPeriodInMonths1 = PrimitiveVestingPeriodType;
/**
 * The calendar day of a month to award vesting.
 */
export type EnumVestingDayOfMonth =
  | "01"
  | "02"
  | "03"
  | "04"
  | "05"
  | "06"
  | "07"
  | "08"
  | "09"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29_OR_LAST_DAY_OF_MONTH"
  | "30_OR_LAST_DAY_OF_MONTH"
  | "31_OR_LAST_DAY_OF_MONTH"
  | "VESTING_START_DAY_OR_LAST_DAY_OF_MONTH";

/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingEventTrigger2 {
  type?: "VESTING_SCHEDULE_RELATIVE";
  /**
   * The span of time that must have elapsed since the condition `relative_to_condition_id` occurred for this condition to trigger. For weeks or "ideal" years (365 days), use `VestingPeriodInDays`. For calendar years use `VestingPeriodInMonths`.
   */
  period: TypeVestingPeriodInDays | TypeVestingPeriodInMonths;
  /**
   * Reference to the vesting condition ID to which the `period` is relative
   */
  relative_to_condition_id: string;
}
/**
 * Abstract type describing the fields common to all periods of time (e.g. 3 months, 365 days) for use in Vesting Terms
 */
export interface PrimitiveVestingPeriodType {
  /**
   * The quantity of `type` units of time; e.g. for 3 months, this would be `3`; for 30 days, this would be `30`
   */
  length: number;
  type: EnumPeriodType;
  /**
   * The number of times this vesting period triggers. If vesting occurs monthly for 36 months, for example, this would be `36`
   */
  occurrences: number;
  [k: string]: unknown;
}
export interface TypeVestingPeriodInDays2 {
  length?: unknown;
  type?: "DAYS";
  occurrences?: unknown;
}
export interface TypeVestingPeriodInMonths2 {
  length?: unknown;
  type?: "MONTHS";
  occurrences?: unknown;
  day_of_month: EnumVestingDayOfMonth;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a vesting condition satisfied at the security's vesting commencement date
 */
export type TypeVestingStartTrigger = TypeVestingStartTrigger1 & TypeVestingStartTrigger2;
export type TypeVestingStartTrigger1 = PrimitiveVestingConditionTriggerType;
/**
 * Identifies the sub-type of trigger
 */
export type EnumVestingTriggerType =
  | "VESTING_START_DATE"
  | "VESTING_SCHEDULE_ABSOLUTE"
  | "VESTING_SCHEDULE_RELATIVE"
  | "VESTING_EVENT";

/**
 * Abstract type describing base fields needed in all triggers types, with a 'trigger' being a condition that must be satisfied for a VestingCondition to be met
 */
export interface PrimitiveVestingConditionTriggerType {
  type: EnumVestingTriggerType;
  [k: string]: unknown;
}
export interface TypeVestingStartTrigger2 {
  type?: "VESTING_START_DATE";
}
